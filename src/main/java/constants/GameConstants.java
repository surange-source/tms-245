package constants;

import client.MapleCharacter;
import client.MapleClient;
import client.inventory.Equip;
import client.skills.Skill;
import client.skills.SkillFactory;
import client.status.MonsterStatus;
import configs.CubeConfig;
import configs.FishingConfig;
import configs.ServerConfig;
import constants.skills.*;
import org.apache.logging.log4j.Logger;
import server.MapleItemInformationProvider;
import server.StructItemOption;
import server.buffs.MapleStatEffect;
import server.events.MapleDojoAgent;
import server.maps.MapleMapObjectType;
import tools.DateUtil;
import packet.MaplePacketCreator;
import server.Randomizer;

import java.awt.*;
import java.util.*;
import java.util.List;

public final class GameConstants {

    public static final int MAX_CHARS_SLOTS = 52;
    public static final int DamageSkinSlotMax = 48;

    public static final int MVPPAY_BRONZEI = 100;
    public static final int MVPPAY_BRONZEII = 1000;
    public static final int MVPPAY_BRONZEIII = 3000;
    public static final int MVPPAY_BRONZEIV = 5000;
    public static final int MVPPAY_SILVER = 5000;
    public static final int MVPPAY_GOLD = 15000;
    public static final int MVPPAY_DIAMOND = 20000;
    public static final int MVPPAY_RED = 40000;

    public static final List<MapleMapObjectType> rangedMapobjectTypes = Collections.unmodifiableList(Arrays.asList(
            MapleMapObjectType.PLAYER,
            MapleMapObjectType.HIRED_MERCHANT,
            MapleMapObjectType.ITEM,
            MapleMapObjectType.MONSTER,
            MapleMapObjectType.TOWN_PORTAL,
            MapleMapObjectType.REACTOR,
            MapleMapObjectType.SUMMON,
            MapleMapObjectType.NPC,
            MapleMapObjectType.AFFECTED_AREA,
            MapleMapObjectType.EXTRACTOR));
    //禁止GM命令刷的道具
    public static final int[] itemBlock = {
        2430112, //神奇方塊碎片
        4001168, //金楓葉
        3993003, //紅色福袋
        2340000, //祝福卷軸
        2049100, //混沌卷軸60%
        4001129, //楓之谷紀念幣
        2040727, //鞋子防滑卷軸
        2040037, //奇跡的奧芙赫班的法冠卷軸5%
        2040006,
        2040007,
        2040303,
        2040403,
        2040506,
        2040507,
        2040603,
        2040709,
        2040710,
        2040711,
        2040806,
        2040903,
        2041024,
        2041025,
        2043003,
        2043103,
        2043203,
        2043303,
        2043703,
        2043803,
        2044003,
        2044103,
        2044203,
        2044303,
        2044403,
        2044503,
        2044603,
        2044908,
        2044815,
        2044019,
        2044703};
    public static final int JAIL = 993073000, MAX_BUFFSTAT = 33, MAX_MOBSTAT = 5, MAX_LEVEL = 250;
    //禁止使用的技能
    public static final int[] blockedSkills = {};
    public static final String[] RESERVED = {"Rental", "Donor"};
    public static final String[] stats = {
        "tuc", "reqLevel", "reqJob", "reqSTR", "reqDEX", "reqINT", "reqLUK", "reqPOP",
        "cash", "cursed", "success", "setItemID", "equipTradeBlock", "durability",
        "randOption", "randStat", "masterLevel", "reqSkillLevel", "elemDefault",
        "incRMAS", "incRMAF", "incRMAI", "incRMAL", "canLevel", "skill", "charmEXP",
        "limitedLv", "imdR", "bdR", "superiorEqp", "maxSuperiorEqp", "recover",
        "reset", "perfectReset", "effectItemID", "life", "limitedLife"};
    public static final int[] hyperTele = {
        310000000, //黑色之翼領地 - 埃德爾斯坦
        220000000, //玩具城 - 玩具城
        100000000, //弓箭手村 - 弓箭手村
        250000000, //武陵 - 武陵
        240000000, //神木村 - 神木村
        104000000, //維多利亞 - 維多利亞港
        103000000, //廢棄都市 - 廢棄都市
        102000000, //勇士部落 - 勇士部落
        101000000, //魔法密林 - 魔法密林
        120000000, //諾特勒斯 - 諾特勒斯碼頭
        260000000, //火焰之路 - 納希沙漠
        200000000, //神秘島 - 天空之城
        230000000};//水下世界 - 水下世界
    public static final int[] sealedEquip = {
        1012438, // 漩渦文身
        1022211, // 漩渦眼鏡
        1032224, // 漩渦耳環
        1122269, // 漩渦吊墜
        1132247, // 漩渦腰帶
        1152160, // 漩渦護肩
        1003976, // 漩渦帽子
        1102623, // 漩渦披風
        1082556, // 漩渦手套
        1052669, // 漩渦皇家外套
        1072870, // 漩渦鞋
        1212089, // 漩渦雙頭杖
        1222084, // 漩渦靈魂手銃
        1232084, // 漩渦惡魔劍
        1242090, // 漩渦鎖鏈劍
        1252033, // 漩渦虎梳魔法棒
        1302297, // 漩渦劍
        1312173, // 漩渦斧
        1322223, // 漩渦錘
        1332247, // 漩渦匕首
        1342090, // 漩渦刀
        1362109, // 漩渦手杖
        1372195, // 漩渦短杖
        1382231, // 漩渦長杖
        1402220, // 漩渦雙手劍
        1412152, // 漩渦雙手戰斧
        1422158, // 漩渦巨錘
        1432187, // 漩渦矛
        1442242, // 漩渦戟
        1452226, // 漩渦弓
        1462213, // 漩渦弩
        1472235, // 漩渦拳甲
        1482189, // 漩渦衝拳
        1492199, // 漩渦手銃
        1522113, // 漩渦雙翼短杖
        1532118, // 漩渦手炮
    };

    public final static int[] goldrewards = {
        2049400, 1, // 高級潛能附加卷軸
        2049401, 2, // 潛能附加卷軸
        2049301, 2, // 裝備強化卷軸
        2340000, 1, // 祝福卷軸
        2070007, 2, // 月牙鏢
        2070016, 1, // 雪球
        2330007, 1, // 高科技穿甲彈
        1402037, 1, // 龍背刃
        2290096, 1, // [能手冊]楓之谷勇士 20
        2290049, 1, // [能手冊]聖光普照 30
        2290041, 1, // [能手冊]天降落星 30
        2290047, 1, // [能手冊]落霜冰破 30
        2290095, 1, // [能手冊]煙霧彈 30
        2290017, 1, // [能手冊]葵花寶典 30
        2290075, 1, // [能手冊]一擊要害箭 30
        2290085, 1, // [能手冊]三連環光擊破 30
        2290116, 1, // [能手冊]地毯式空襲 30
        1302059, 3, // 狂龍閃電劍
        2049100, 1, // 混沌卷軸60%
        1092049, 1, // 熱情劍盾
        1102041, 1, // 浪人披風(粉)
        1432018, 3, // 藍色滑雪板
        1022047, 3, // 貓頭鷹
        3010051, 1, // 沙漠兔子1靠墊
        3010020, 1, // 澎澎檜木桶
        2040914, 1, // 盾牌攻擊卷軸60%

        1432011, 3, // 寒冰破魔槍
        1442020, 3, // 巨靈開山斧
        1382035, 3, // 冰肌玲瓏杖
        1372010, 3, // 嗜魂法杖
        1332027, 3, // 飛羽刃
        1302056, 3, // 一刀兩斷
        1402005, 3, // 斬魔刀
        1472053, 3, // 逆龍咆哮拳
        1462018, 3, // 紅炎神機弩
        1452017, 3, // 魔翼之弓
        1422013, 3, // 獅子之魂
        1322029, 3, // 雷神釘
        1412010, 3, // 項羽之斧

        1472051, 1, // 寒木升龍拳
        1482013, 1, // 撕裂者
        1492013, 1, // 梟龍

        1382049, 1, // 朱雀長杖
        1382050, 1, // 玄武長杖
        1382051, 1, // 白虎長杖
        1382052, 1, // 青龍長杖
        1382045, 1, // 火靈珠長杖
        1382046, 1, // 毒靈珠長杖
        1382047, 1, // 冰靈珠長杖
        1382048, 1, // 雷靈珠長杖

        1372035, 1, // 火靈珠短杖
        1372036, 1, // 毒靈珠短杖
        1372037, 1, // 冰靈珠短杖
        1372038, 1, // 雷靈珠短杖
        1372039, 1, // 爆炎之杖
        1372040, 1, // 劇毒之杖
        1372041, 1, // 寒冰之杖
        1372042, 1, // 狂雷之杖
        1332032, 8, // 聖誕樹
        1482025, 7, // 粉色花邊游泳圈

        4001011, 8, // 猴子橡皮擦
        4001010, 8, // 蘑菇王橡皮擦
        4001009, 8, // 木妖橡皮擦

        2047000, 1, // 單手武器攻擊力製煉書
        2047001, 1, // 單手武器命中率製煉書
        2047002, 1, // 單手武器魔力製煉書
        2047100, 1, // 雙手武器攻擊力製煉書
        2047101, 1, // 雙手武器命中率製煉書
        2047102, 1, // 雙手武器魔力製煉書

        2047200, 1, // 防具力量製煉書
        2047201, 1, // 防具智力製煉書
        2047202, 1, // 防具敏捷製煉書
        2047203, 1, // 防具幸運製煉書
        2047204, 1, // 防具手技製煉書
        2047205, 1, // 防具體力製煉書
        2047206, 1, // 防具魔力製煉書
        2047207, 1, // 防具防禦力製煉書
        2047208, 1, // 防具命中率製煉書

        2047300, 1, // 飾品力量製煉書
        2047301, 1, // 飾品智力製煉書
        2047302, 1, // 飾品敏捷製煉書
        2047303, 1, // 飾品幸運製煉書
        2047304, 1, // 飾品手技製煉書
        2047305, 1, // 飾品跳躍力製煉書
        2047306, 1, // 飾品命中率製煉書
        2047307, 1, // 飾品迴避率製煉書
        2047308, 1, // 飾品體力製煉書
        2047309, 1, // 飾品魔力製煉書

        2046004, 1, // 一級單手武器攻擊卷軸
        2046005, 1, // 一級單手武器魔力卷軸
        2046104, 1, // 一級雙手武器攻擊卷軸
        2046105, 1, // 一級雙手武器魔力卷軸
        2046208, 1, // 一級防具力量卷軸
        2046209, 1, // 一級防具智力卷軸
        2046210, 1, // 一級防具敏捷卷軸
        2046211, 1, // 一級防具幸運卷軸
        2046212, 1, // 一級防具體力卷軸
        //list
        1002801, 2, // 深藍頭巾
        1102205, 2, // 緋紅之心披風
        1402046, 2, // 永恆玄冥劍
        1402047, 2, // 重生玄冥劍
        1462054, 2, // 雷光劍
        1462055, 2, // 焰光劍
        1472074, 2, // 神秘亞歷山大之劍
        //pro raven
        1332077, 1, // 幽暗鴉之喙
        1402049, 1, // 幽暗鴉之翼
        1462053, 1, // 幽暗鴉之瞳
        1472072, 1, // 幽暗鴉之爪
        1492047, 1, // 幽暗鴉之銃
        //-------------------------------------
        1032080, 20, // 一代不速之客耳環
        1032081, 15, // 二代不速之客耳環
        1032082, 10, // 三代不速之客耳環
        1032083, 5, // 末代不速之客耳環
        1032084, 1, // 至尊不速之客耳環
        1112435, 20, // 一代不速之客戒指
        1112436, 15, // 二代不速之客戒指
        1112437, 10, // 三代不速之客戒指
        1112438, 5, // 末代不速之客戒指
        1112439, 1, // 至尊不速之客戒指
        1122081, 20, // 一代不速之客項鏈
        1122082, 15, // 二代不速之客項鏈
        1122083, 10, // 三代不速之客項鏈
        1122084, 5, // 末代不速之客項鏈
        1122085, 1, // 至尊不速之客項鏈
        1132036, 20, // 一代不速之客腰帶
        1132037, 15, // 二代不速之客腰帶
        1132038, 10, // 三代不速之客腰帶
        1132039, 5, // 末代不速之客腰帶
        1132040, 1, // 至尊不速之客腰帶
        //source
        1092070, 40, // 一代不速之客劍士盾
        1092071, 30, // 二代不速之客劍士盾
        1092072, 20, // 三代不速之客劍士盾
        1092073, 10, // 末代不速之客劍士盾
        1092074, 1, // 至尊不速之客劍士盾
        1092075, 40, // 一代不速之客法師盾
        1092076, 30, // 二代不速之客法師盾
        1092077, 20, // 三代不速之客法師盾
        1092078, 10, // 末代不速之客法師盾
        1092079, 1, // 至尊不速之客法師盾
        1092080, 40, // 一代不速之客盜賊盾
        1092081, 30, // 二代不速之客盜賊盾
        1092082, 20, // 三代不速之客盜賊盾
        1092083, 10, // 末代不速之客盜賊盾
        1092084, 1, // 至尊不速之客盜賊盾
        1092087, 1, // 戰神勇士盾
        1092088, 1, // 戰神黑暗盾
        1302143, 40, // 一代不速之客單手劍
        1302144, 30, // 二代不速之客單手劍
        1302145, 20, // 三代不速之客單手劍
        1302146, 10, // 末代不速之客單手劍
        1302147, 1, // 至尊不速之客單手劍
        1312058, 40, // 一代不速之客單手斧
        1312059, 30, //
        1312060, 20, //
        1312061, 10, //
        1312062, 1, //
        1322086, 40, // 一代不速之客單手鈍器
        1322087, 30, //
        1322088, 20, //
        1322089, 10, //
        1322090, 1, //
        1332116, 40, // 一代不速之客短劍-運
        1332117, 30, //
        1332118, 20, //
        1332119, 10, //
        1332120, 1, //
        1332121, 40, // 一代不速之客短劍-力
        1332122, 30, //
        1332123, 20, //
        1332124, 10, //
        1332125, 1, //
        1342029, 40, // 一代不速之客刀
        1342030, 30, //
        1342031, 20, //
        1342032, 10, //
        1342033, 1, //
        1372074, 40, // 一代不速之客短杖
        1372075, 30, //
        1372076, 20, //
        1372077, 10, //
        1372078, 1, //
        1382095, 40, // 一代不速之客長杖
        1382096, 30, //
        1382097, 20, //
        1382098, 10, //
        1392099, 1, //
        1402086, 40, // 一代不速之客雙手劍
        1402087, 30, //
        1402088, 20, //
        1402089, 10, //
        1402090, 1, //
        1412058, 40, // 一代不速之客雙手斧
        1412059, 30, //
        1412060, 20, //
        1412061, 10, //
        1412062, 1, //
        1422059, 40, // 一代不速之客雙手鈍器
        1422060, 30, //
        1422061, 20, //
        1422062, 10, //
        1422063, 1, //
        1432077, 40, // 一代不速之客槍
        1432078, 30, //
        1432079, 20, //
        1432080, 10, //
        1432081, 1, //
        1442107, 40, // 一代不速之客矛
        1442108, 30, //
        1442109, 20, //
        1442110, 10, //
        1442111, 1, //
        1452102, 40, // 一代不速之客弓
        1452103, 30, //
        1452104, 20, //
        1452105, 10, //
        1452106, 1, //
        1462087, 40, // 一代不速之客弩
        1462088, 30, //
        1462089, 20, //
        1462090, 10, //
        1462091, 1, //
        1472113, 40, // 一代不速之客 拳套
        1472114, 30, //
        1472115, 20, //
        1472116, 10, //
        1472117, 1, //
        1482075, 40, // 一代不速之客 指節
        1482076, 30, //
        1482077, 20, //
        1482078, 10, //
        1482079, 1, //
        1492075, 40, // 一代不速之客短槍
        1492076, 30, //
        1492077, 20, //
        1492078, 10, //
        1492079, 1, //
        1132012, 2, // 法老的腰帶
        1132013, 1, // 不滅的法老腰帶
        //-------------------------------------
        1032031, 1, // 永恆金盾墜
        1102172, 1, // 永恆不滅披風
        1002776, 1, // 永恆冠軍盔
        1002777, 1, // 永恆玄妙帽
        1002778, 1, // 永恆霓翎帽
        1002779, 1, // 永恆迷蹤帽
        1002780, 1, // 永恆海王星
        1082234, 1, // 永恆定邊手套
        1082235, 1, // 永恆逍遙手套
        1082236, 1, // 永恆白雲手套
        1082237, 1, // 永恆探雲手套
        1082238, 1, // 永恆撫浪手套
        1052155, 1, // 永恆演武鎧
        1052156, 1, // 永恆奧神袍
        1052157, 1, // 永恆巡禮者
        1052158, 1, // 永恆翻雲服
        1052159, 1, // 永恆霸七海
        1072355, 1, // 永恆堅壁靴
        1072356, 1, // 永恆縹緲鞋
        1072357, 1, // 永恆彩虹鞋
        1072358, 1, // 永恆舞空靴
        1072359, 1, // 永恆定海靴
        1092057, 1, // 永恆魔光盾
        1092058, 1, // 永恆寒冰盾
        1092059, 1, // 永恆匿蹤盾
        1122012, 1, // 永恆玉珮
        1302081, 1, // 永恆破甲劍
        1312037, 1, // 永恆斷蚺斧
        1322060, 1, // 永恆驚破天
        1332073, 1, // 永恆狂鯊鋸
        1332074, 1, // 永恆斷首刃
        1372044, 1, // 永恆蝶翼杖
        1382057, 1, // 永恆冰輪杖
        1402046, 1, // 永恆玄冥劍
        1412033, 1, // 永恆碎黿斧
        1422037, 1, // 永恆威震天
        1432047, 1, // 永恆顯聖槍
        1442063, 1, // 永恆神光戟
        1452057, 1, // 永恆驚電弓
        1462050, 1, // 永恆冥雷弩
        1472068, 1, // 永恆大悲賦
        1482023, 1, // 永恆孔雀翎
        1492023, 1, // 永恆鳳凰銃
        1342011, 1, // 永恆之刃
        1522015, 1, // 永恆鮮花弩槍
        1532015, 1, // 永恆拯救者
        //-------------------------
        //頭盔
        1003280, 1, // 深淵冠軍盔
        1003281, 1, // 深淵玄妙帽
        1003282, 1, // 深淵霓翎帽
        1003283, 1, // 深淵迷蹤帽
        1003284, 1, // 深淵海王星
        //衣服
        1052374, 1, // 深淵演武鎧
        1052375, 1, // 深淵奧神袍
        1052376, 1, // 深淵巡禮者
        1052377, 1, // 深淵翻雲服
        1052378, 1, // 深淵霸七海
        //鞋子
        1072544, 1, // 深淵堅壁靴
        1072545, 1, // 深淵縹緲鞋
        1072546, 1, // 深淵彩虹鞋
        1072547, 1, // 深淵舞空靴
        1072548, 1, // 深淵定海靴
        //手套
        1082328, 1, // 深淵定邊手套
        1082329, 1, // 深淵逍遙手套
        1082330, 1, // 深淵白雲手套
        1082331, 1, // 深淵探雲手套
        1082332, 1, // 深淵撫浪手套
        //武器
        1302173, 1, // 深淵破甲劍
        1312072, 1, // 深淵斷蚺斧
        1322107, 1, // 深淵驚破天
        1332148, 1, // 深淵狂鯊鋸
        1332149, 1, // 深淵斷首刃
        1342040, 1, // 深淵之刃
        1372100, 1, // 深淵蝶翼杖
        1382124, 1, // 深淵冰輪杖
        1402111, 1, // 深淵玄冥劍
        1412071, 1, // 深淵碎黿斧
        1422073, 1, // 深淵威震天
        1432099, 1, // 深淵顯聖槍
        1442136, 1, // 深淵神光戟
        1452129, 1, // 深淵驚電弓
        1462118, 1, // 深淵冥雷弩
        1472141, 1, // 深淵大悲賦
        1482102, 1, // 深淵孔雀翎
        1492101, 1, // 深淵鳳凰銃
        1522020, 1, // 深淵鮮花弩槍
        1532037, 1, // 深淵拯救者
        1942004, 1, // 深淵面罩
        1952004, 1, // 深淵吊墜
        1962004, 1, // 深淵之翼
        1972004, 1, // 深淵之尾
        //---------------------------
        2030008, 5, // 咖啡牛奶
        1442018, 3, // 凍凍魚
        2040900, 4, // 盾牌防禦卷軸
        2049100, 10, // 混沌卷軸60%
        2000005, 10, // 超級藥水
        2000004, 10, // 特殊藥水
        2430144, 10, // 秘密能手冊
        2290285, 10, // [能手冊]神秘能手冊
        2028061, 10, // 不可思議的卷軸卷
        2028062, 10, // 不可思議的配方卷
        2530000, 5 // 幸運日卷軸
    }; // Gold Box
    public final static int[] silverrewards = {
        2049401, 2, // 潛能附加卷軸
        2049301, 2, // 裝備強化卷軸
        3010041, 1, // 骷髏王座
        1002452, 6, // 黑星白頭巾
        1002455, 6, // 黑星紅頭巾
        2290084, 1, // [能手冊]三連環光擊破 20
        2290048, 1, // [能手冊]聖光普照 20
        2290040, 1, // [能手冊]天降落星 20
        2290046, 1, // [能手冊]落霜冰破 20
        2290074, 1, // [能手冊]一擊要害箭 20
        2290064, 1, // [能手冊]進階終極攻擊20
        2290094, 1, // [能手冊]煙霧彈 20
        2290022, 1, // [能手冊]黑暗力量 20
        2290056, 1, // [能手冊]神箭手 20
        2290066, 1, // [能手冊]神弩手 20
        2290020, 1, // [能手冊]聖域 20
        1102082, 1, // 破舊的黑色披風
        1302049, 1, // 光線鞭子
        1102041, 1, // 浪人披風(粉)
        1452019, 2, // 天鷹弓(白)
        4001116, 3, // 六角水晶項鏈
        4001012, 3, // 大幽靈橡皮擦
        1022060, 2, // 狐猴
        2430144, 5, // 秘密能手冊
        2290285, 5, // [能手冊]神秘能手冊
        2028062, 5, // 不可思議的卷軸卷
        2028061, 5, // 不可思議的配方卷
        2530000, 1, // 幸運日卷軸
        2041100, 1, // 戒指力量卷軸
        2041101, 1, // 戒指力量卷軸
        2041102, 1, // 戒指力量卷軸10%
        2041103, 1, // 戒指智力卷軸
        2041104, 1, // 戒指智力卷軸
        2041105, 1, // 戒指智力卷軸10%
        2041106, 1, // 戒指敏捷卷軸
        2041107, 1, // 戒指敏捷卷軸
        2041108, 1, // 戒指敏捷卷軸10%
        2041109, 1, // 戒指幸運卷軸
        2041110, 1, // 戒指幸運卷軸
        2041111, 1, // 戒指幸運卷軸10%
        2041112, 1, // 戒指力量卷軸
        2041113, 1, // 戒指力量卷軸
        2041114, 1, // 戒指智力卷軸
        2041115, 1, // 戒指智力卷軸
        2041116, 1, // 戒指敏捷卷軸
        2041117, 1, // 戒指敏捷卷軸
        2041118, 1, // 戒指幸運卷軸
        2041119, 1, // 戒指幸運卷軸
        2041300, 1, // 腰帶力量卷軸100%
        2041301, 1, // 腰帶力量卷軸60%
        2041302, 1, // 腰帶力量卷軸10%
        2041303, 1, // 腰帶智力卷軸100%
        2041304, 1, // 腰帶智力卷軸60%
        2041305, 1, // 腰帶智力卷軸10%
        2041306, 1, // 腰帶敏捷卷軸100%
        2041307, 1, // 腰帶敏捷卷軸60%
        2041308, 1, // 腰帶敏捷卷軸10%
        2041309, 1, // 腰帶幸運卷軸100%
        2041310, 1, // 腰帶幸運卷軸60%
        2041311, 1, // 腰帶幸運卷軸10%
        2041312, 1, // 腰帶力量卷軸70%
        2041313, 1, // 腰帶力量卷軸30%
        2041314, 1, // 腰帶智力卷軸70%
        2041315, 1, // 腰帶智力卷軸30%
        2041316, 1, // 腰帶敏捷卷軸70%
        2041317, 1, // 腰帶敏捷卷軸30%
        2041318, 1, // 腰帶幸運卷軸70%
        2041319, 1, // 腰帶幸運卷軸30%
        2049200, 1, // 配飾力量卷軸70%
        2049201, 1, // 配飾力量卷軸30%
        2049202, 1, // 配飾敏捷卷軸70%
        2049203, 1, // 配飾敏捷卷軸30%
        2049204, 1, // 配飾智力卷軸70%
        2049205, 1, // 配飾智力卷軸30%
        2049206, 1, // 配飾幸運卷軸70%
        2049207, 1, // 配飾幸運卷軸30%
        2049208, 1, // 配飾HP卷軸70%
        2049209, 1, // 配飾HP卷軸30%
        2049210, 1, // 配飾MP卷軸70%
        2049211, 1, // 配飾MP卷軸30%
        1432011, 3, // 寒冰破魔槍
        1442020, 3, // 巨靈開山斧
        1382035, 3, // 冰肌玲瓏杖
        1372010, 3, // 嗜魂法杖
        1332027, 3, // 飛羽刃
        1302056, 3, // 一刀兩斷
        1402005, 3, // 斬魔刀
        1472053, 3, // 逆龍咆哮拳
        1462018, 3, // 紅炎神機弩
        1452017, 3, // 魔翼之弓
        1422013, 3, // 獅子之魂
        1322029, 3, // 雷神釘
        1412010, 3, // 項羽之斧
        //-------------------------------------
        1032080, 20, // 一代不速之客耳環
        1032081, 15, // 二代不速之客耳環
        1032082, 10, // 三代不速之客耳環
        1032083, 5, // 末代不速之客耳環
        1032084, 1, // 至尊不速之客耳環
        1112435, 20, // 一代不速之客戒指
        1112436, 15, // 二代不速之客戒指
        1112437, 10, // 三代不速之客戒指
        1112438, 5, // 末代不速之客戒指
        1112439, 1, // 至尊不速之客戒指
        1122081, 20, // 一代不速之客項鏈
        1122082, 15, // 二代不速之客項鏈
        1122083, 10, // 三代不速之客項鏈
        1122084, 5, // 末代不速之客項鏈
        1122085, 1, // 至尊不速之客項鏈
        1132036, 20, // 一代不速之客腰帶
        1132037, 15, // 二代不速之客腰帶
        1132038, 10, // 三代不速之客腰帶
        1132039, 5, // 末代不速之客腰帶
        1132040, 1, // 至尊不速之客腰帶
        //source
        1092070, 40, // 一代不速之客劍士盾
        1092071, 30, // 二代不速之客劍士盾
        1092072, 20, // 三代不速之客劍士盾
        1092073, 10, // 末代不速之客劍士盾
        1092074, 1, // 至尊不速之客劍士盾
        1092075, 40, // 一代不速之客法師盾
        1092076, 30, // 二代不速之客法師盾
        1092077, 20, // 三代不速之客法師盾
        1092078, 10, // 末代不速之客法師盾
        1092079, 1, // 至尊不速之客法師盾
        1092080, 40, // 一代不速之客盜賊盾
        1092081, 30, // 二代不速之客盜賊盾
        1092082, 20, // 三代不速之客盜賊盾
        1092083, 10, // 末代不速之客盜賊盾
        1092084, 1, // 至尊不速之客盜賊盾
        1092087, 1, // 戰神勇士盾
        1092088, 1, // 戰神黑暗盾
        1302143, 40, // 一代不速之客單手劍
        1302144, 30, // 二代不速之客單手劍
        1302145, 20, // 三代不速之客單手劍
        1302146, 10, // 末代不速之客單手劍
        1302147, 1, // 至尊不速之客單手劍
        1312058, 40, // 一代不速之客單手斧
        1312059, 30, //
        1312060, 20, //
        1312061, 10, //
        1312062, 1, //
        1322086, 40, // 一代不速之客單手鈍器
        1322087, 30, //
        1322088, 20, //
        1322089, 10, //
        1322090, 1, //
        1332116, 40, // 一代不速之客短劍-運
        1332117, 30, //
        1332118, 20, //
        1332119, 10, //
        1332120, 1, //
        1332121, 40, // 一代不速之客短劍-力
        1332122, 30, //
        1332123, 20, //
        1332124, 10, //
        1332125, 1, //
        1342029, 40, // 一代不速之客刀
        1342030, 30, //
        1342031, 20, //
        1342032, 10, //
        1342033, 1, //
        1372074, 40, // 一代不速之客短杖
        1372075, 30, //
        1372076, 20, //
        1372077, 10, //
        1372078, 1, //
        1382095, 40, // 一代不速之客長杖
        1382096, 30, //
        1382097, 20, //
        1382098, 10, //
        1392099, 1, //
        1402086, 40, // 一代不速之客雙手劍
        1402087, 30, //
        1402088, 20, //
        1402089, 10, //
        1402090, 1, //
        1412058, 40, // 一代不速之客雙手斧
        1412059, 30, //
        1412060, 20, //
        1412061, 10, //
        1412062, 1, //
        1422059, 40, // 一代不速之客雙手鈍器
        1422060, 30, //
        1422061, 20, //
        1422062, 10, //
        1422063, 1, //
        1432077, 40, // 一代不速之客槍
        1432078, 30, //
        1432079, 20, //
        1432080, 10, //
        1432081, 1, //
        1442107, 40, // 一代不速之客矛
        1442108, 30, //
        1442109, 20, //
        1442110, 10, //
        1442111, 1, //
        1452102, 40, // 一代不速之客弓
        1452103, 30, //
        1452104, 20, //
        1452105, 10, //
        1452106, 1, //
        1462087, 40, // 一代不速之客弩
        1462088, 30, //
        1462089, 20, //
        1462090, 10, //
        1462091, 1, //
        1472113, 40, // 一代不速之客 拳套
        1472114, 30, //
        1472115, 20, //
        1472116, 10, //
        1472117, 1, //
        1482075, 40, // 一代不速之客 指節
        1482076, 30, //
        1482077, 20, //
        1482078, 10, //
        1482079, 1, //
        1492075, 40, // 一代不速之客短槍
        1492076, 30, //
        1492077, 20, //
        1492078, 10, //
        1492079, 1, //
        1132012, 2, // 法老的腰帶
        1132013, 1, // 不滅的法老腰帶
        //--------------------------------
        1002790, 1, // 重生冠軍盔
        1002791, 1, // 重生玄妙帽
        1002792, 1, // 重生霓翎帽
        1002793, 1, // 重生迷蹤帽
        1002794, 1, // 重生海王星
        1082239, 1, // 重生定邊手套
        1082240, 1, // 重生逍遙手套
        1082241, 1, // 重生白雲手套
        1082242, 1, // 重生探雲手套
        1082243, 1, // 重生撫浪手套
        1052160, 1, // 重生演武鎧
        1052161, 1, // 重生奧神袍
        1052162, 1, // 重生巡禮者
        1052163, 1, // 重生翻雲服
        1052164, 1, // 重生霸七海
        1072361, 1, // 重生堅壁靴
        1072362, 1, // 重生縹緲鞋
        1072363, 1, // 重生彩虹鞋
        1072364, 1, // 重生舞空靴
        1072365, 1, // 重生定海靴
        1302086, 1, // 重生破甲劍
        1312038, 1, // 重生斷蚺斧
        1322061, 1, // 重生驚破天
        1332075, 1, // 重生狂鯊鋸
        1332076, 1, // 重生斷首刃
        1372045, 1, // 重生蝶翼杖
        1382059, 1, // 重生冰輪杖
        1402047, 1, // 重生玄冥劍
        1412034, 1, // 重生碎黿斧
        1422038, 1, // 重生威震天
        1432049, 1, // 重生顯聖槍
        1442067, 1, // 重生神光戟
        1452059, 1, // 重生驚電弓
        1462051, 1, // 重生冥雷弩
        1472071, 1, // 重生大悲賦
        1482024, 1, // 重生孔雀翎
        1492025, 1, // 重生鳳凰銃
        1342012, 1, // 重生之刃
        1942002, 1, // 重生面罩
        1952002, 1, // 重生吊墜
        1962002, 1, // 重生飛翼
        1972002, 1, // 重生尾巴
        1522016, 1, // 重生鮮花弩槍
        1532016, 1, // 重生拯救者
        //-------------------------
        1002587, 3, // 黑色烤栗販帽子
        1402044, 1, // 南瓜燈籠
        2101013, 4, // 昭和BOSS召喚
        1442046, 1, // 超級滑雪板
        1422031, 1, // 藍色海豹抱枕
        1332054, 3, // 閃電飛刀
        1012056, 3, // 狗狗鼻
        1022047, 3, // 貓頭鷹
        3012002, 1, // 浴桶
        1442012, 3, // 天空雪板
        1442018, 3, // 凍凍魚
        1432010, 3, // 奧丁手戟
        2000005, 10, // 超級藥水
        2049100, 10, // 混沌卷軸60%
        2000004, 10 // 特殊藥水
    };
    public final static int[] normalDrops = {
        4001009, //木妖橡皮擦
        4001010, //蘑菇王橡皮擦
        4001011, //猴子橡皮擦
        4001012, //大幽靈橡皮擦
        4001013, //綠水靈橡皮擦
        4001014, //三眼章魚橡皮擦
        4001021, //狸子橡皮擦
        4001038, //木妖橡皮擦
        4001039, //蘑菇王橡皮擦
        4001040, //猴子橡皮擦
        4001041, //大幽靈橡皮擦
        4001042, //綠水靈橡皮擦
        4001043, //三眼章魚橡皮擦
        4001038, //木妖橡皮擦 --------------------
        4001039, //蘑菇王橡皮擦
        4001040, //猴子橡皮擦
        4001041, //大幽靈橡皮擦
        4001042, //綠水靈橡皮擦
        4001043, //三眼章魚橡皮擦
        4001038, //木妖橡皮擦 --------------------
        4001039, //蘑菇王橡皮擦
        4001040, //猴子橡皮擦
        4001041, //大幽靈橡皮擦
        4001042, //綠水靈橡皮擦
        4001043, //三眼章魚橡皮擦
        4000164, //藍泡泡翻車魚之心
        2000000, //紅色藥水
        2000003, //藍色藥水
        2000004, //特殊藥水
        2000005, //超級藥水
        4000019, //綠色蝸牛殼
        4000000, //藍色蝸牛殼
        4000016, //紅色蝸牛殼
        4000006, //三眼章魚觸角
        2100121, //綠水靈召喚包
        4000029, //香蕉
        4000064, //烏鴉羽毛
        5110000, //紅心巧克力
        4032181, //逆奧銀幣
        4006001, //召回石
        4006000, //魔法石
        2050004, //萬能療傷藥
        3994102, //羅盤用N
        3994103, //羅盤用E
        3994104, //羅盤用W
        3994105, //羅盤用S
        2430007, //空羅盤
        4000164, //藍泡泡翻車魚之心
        2000000, //紅色藥水
        2000003, //藍色藥水
        2000004, //特殊藥水
        2000005, //超級藥水
        4000019, //綠色蝸牛殼
        4000000, //藍色蝸牛殼
        4000016, //紅色蝸牛殼
        4000006, //三眼章魚觸角
        2100121, //綠水靈召喚包
        4000029, //香蕉
        4000064, //烏鴉羽毛
        5110000, //紅心巧克力
        4032181, //逆奧銀幣
        4006001, //召回石
        4006000, //魔法石
        2050004, //萬能療傷藥
        3994102, //羅盤用N
        3994103, //羅盤用E
        3994104, //羅盤用W
        3994105, //羅盤用S
        2430007}; //空羅盤
    public final static int[] rareDrops = {
        2049100, //混沌卷軸60%
        2430144, //秘密能手冊
        2028062, //不可思議的配方卷
        2028061, //不可思議的卷軸卷
        2290285, //[能手冊]神秘能手冊
        2049301, //裝備強化卷軸
        2049401, //潛能附加卷軸
        2022326, //森林的祝福
        2049000, //白醫卷軸
        2049001, //白醫卷軸
        2049002};//白醫卷軸
    public final static int[] superDrops = {
        2040804, //手套攻擊卷軸60%
        2049400, //高級潛能附加卷軸
        2028062, //不可思議的配方卷
        2028061, //不可思議的卷軸卷
        2430144, //秘密能手冊
        2290285, //[能手冊]神秘能手冊
        2049100};//混沌卷軸60%
    //questID; FAMILY USES 19000x, MARRIAGE USES 16000x, EXPED USES 16010x
    //dojo = 150000, bpq = 150001, master monster portals: 122600
    //compensate evan = 170000, compensate sp = 170001
    public static final int ENTER_CASH_SHOP = 99998;
    public static final int CHECK_DAY = 99999;
    public static final int DEAD_DEBUFF = 100716;
    public static final int OMOK_SCORE = 122200;
    public static final int KEYSET_SLOT = 100972;
    public static final int MATCH_SCORE = 122210;
    public static final int HP_ITEM = 122221;
    public static final int MP_ITEM = 122223;
    public static final int BUFF_SKILL = 122224;
    public static final int JAIL_TIME = 123455;
    public static final int JAIL_QUEST = 123456;
    public static final int REPORT_QUEST = 123457;
    public static final int ULT_EXPLORER = 111111;
    //codex = -55 slot
    //crafting/gathering are designated as skills(short exp then byte 0 then byte level), same with recipes(integer.max_value skill level)
    public static final int ENERGY_DRINK = 122500;
    public static final int HARVEST_TIME = 122501;
    public static final int PENDANT_SLOT = 122700;
    public static final int CURRENT_SET = 122800;
    public static final int BOSS_PQ = 150001;
    public static final int JAGUAR = 111112;
    public static final int PARTY_REQUEST = 122900;
    public static final int PARTY_INVITE = 122901;
    public static final int ALLOW_PET_LOOT = 122902;
    public static final int 寵物自動餵食 = 12334;
    public static final int QUICK_SLOT = 123000;
    public static final int BossList = 7265;
    public static final int 精靈耳朵 = 7784;
    public static final int 阿尼瑪外形 = 7786;
    public static final int 重新領取勳章 = 29949;
    public static final int 楓方塊 = 52889;
    public static final int 台方塊 = 52998;
    public static final int 林之靈耳朵尾巴 = 59300;
    public static final int 美洲豹管理 = 23008;
    public static final int 每日簽到系統_簽到記錄 = 7;
    public static final int 每日簽到系統_當前時間 = 9;
    public static final int[] allscrolllist = {
        2040002,
        2040005,
        2040016,
        2040026,
        2040031,
        2040100,
        2040105,
        2040200,
        2040205,
        2040302,
        2040310,
        2040318,
        2040323,
        2040328,
        2040329,
        2040330,
        2040331,
        2040402,
        2040412,
        2040419,
        2040422,
        2040427,
        2040502,
        2040505,
        2040514,
        2040517,
        2040534,
        2040602,
        2040612,
        2040619,
        2040622,
        2040627,
        2040702,
        2040705,
        2040708,
        2040802,
        2040805,
        2040816,
        2040825,
        2040902,
        2040915,
        2040920,
        2040925,
        2040928,
        2040933,
        2041002,
        2041005,
        2041008,
        2041011,
        2041014,
        2041017,
        2041020,
        2041023,
        2041102,
        2041105,
        2041108,
        2041111,
        2041201,
        2041206,
        2041302,
        2041305,
        2041308,
        2041311,
        2043002,
        2043008,
        2043019,
        2043102,
        2043114,
        2043202,
        2043214,
        2043302,
        2043402,
        2043702,
        2043802,
        2044002,
        2044014,
        2044015,
        2044102,
        2044114,
        2044202,
        2044214,
        2044302,
        2044314,
        2044402,
        2044414,
        2044502,
        2044602,
        2044702,
        2044802,
        2044809,
        2044902,
        2045202,
        2045302,
        2048002,
        2042102, // 雙頭杖魔法攻擊力卷軸 10%
        2042202, // 靈魂手銃攻擊力卷軸 10%
        2043602, // 手杖攻擊力卷軸 10%
        2042302, // 亡命劍攻擊力卷軸 10%
        2042402 // 能量劍攻擊力卷軸 10%
    };
    public static final int[] needHyperStatLv = {0, 1, 2, 4, 8, 10, 15, 20, 25, 30, 35};
    public static final int[] eventCommonReward = {
        0, 10,
        1, 10,
        4, 5,
        //5060004, 25,
        4170024, 25, // 冰方塊
        4280000, 5, // 永恆的謎之蛋
        4280001, 6, // 重生的謎之蛋
        5490000, 5, // 永恆的熱度
        5490001, 6 // 重生的熱度
    };
    public static final int[] eventUncommonReward = {
        1, 4,
        2, 8,
        3, 8,
        //2022179, 5,
        5062000, 20, // 神奇方塊
        2430082, 20, // 花蘑菇7天使用券
        2430092, 20, // 白雪人騎寵使用券
        2022459, 2, // 星緣的獎勵1
        2022460, 1, // 佳佳的報答1
        2022462, 1, // 佳佳的報答3
        //2430103, 2, //
        2430117, 2, // 獅子王(有效期1年)
        2430118, 2, // 田園紅卡車  (有效期1年)
        2430201, 4, // 兔子騎寵3日券
        2430228, 4, // 兔兔加油騎寵（15天權）
        //2430229, 4, //
        2430283, 4, // 突擊！木馬10天使用券
        2430136, 4, //
        2430476, 4, //
        2430511, 4, //
        2430206, 4, //
        2430199, 1, //
        1032062, 5, //
        5220000, 28, //  //
        2022459, 5, //
        2022460, 5, //
        2022461, 5, //
        2022462, 5, //
        2022463, 5, //
        5050000, 2, //
        4080100, 10, //
        4080000, 10, //
        2049100, 10, //
        2430144, 10, //
        2290285, 10, //
        2028062, 10, //
        2028061, 10, //
        2530000, 5, //
        2531000, 5, //
        2041100, 1, //
        2041101, 1, //
        2041102, 1, //
        2041103, 1, //
        2041104, 1, //
        2041105, 1, //
        2041106, 1, //
        2041107, 1, //
        2041108, 1, //
        2041109, 1, //
        2041110, 1, //
        2041111, 1, //
        2041112, 1, //
        2041113, 1, //
        2041114, 1, //
        2041115, 1, //
        2041116, 1, //
        2041117, 1, //
        2041118, 1, //
        2041119, 1, //
        2041300, 1, //
        2041301, 1, //
        2041302, 1, //
        2041303, 1, //
        2041304, 1, //
        2041305, 1, //
        2041306, 1, //
        2041307, 1, //
        2041308, 1, //
        2041309, 1, //
        2041310, 1, //
        2041311, 1, //
        2041312, 1, //
        2041313, 1, //
        2041314, 1, //
        2041315, 1, //
        2041316, 1, //
        2041317, 1, //
        2041318, 1, //
        2041319, 1, //
        2049200, 1, //
        2049201, 1, //
        2049202, 1, //
        2049203, 1, //
        2049204, 1, //
        2049205, 1, //
        2049206, 1, //
        2049207, 1, //
        2049208, 1, //
        2049209, 1, //
        2049210, 1, //
        2049211, 1//
    };
    public static final int[] eventRareReward = {
        2049100, 5,
        2430144, 5,
        2290285, 5,
        2028062, 5,
        2028061, 5,
        2530000, 2,
        2531000, 2,
        2049116, 1,
        2049401, 10,
        2049301, 20,
        2049400, 3,
        2340000, 1,
        3010130, 5,
        3010131, 5,
        3010132, 5,
        3010133, 5,
        3010136, 5,
        3010116, 5,
        3010117, 5,
        3010118, 5,
        1112405, 1,
        1112445, 1,
        1022097, 1,
        2040211, 1,
        2040212, 1,
        2049000, 2,
        2049001, 2,
        2049002, 2,
        2049003, 2,
        1012058, 2,
        1012059, 2,
        1012060, 2,
        1012061, 2,
        2022460, 4,
        2022461, 3,
        2022462, 4,
        2022463, 3,
        2040041, 1,
        2040042, 1,
        2040334, 1,
        2040430, 1,
        2040538, 1,
        2040539, 1,
        2040630, 1,
        2040740, 1,
        2040741, 1,
        2040742, 1,
        2040829, 1,
        2040830, 1,
        2040936, 1,
        2041066, 1,
        2041067, 1,
        2043023, 1,
        2043117, 1,
        2043217, 1,
        2043312, 1,
        2043712, 1,
        2043812, 1,
        2044025, 1,
        2044117, 1,
        2044217, 1,
        2044317, 1,
        2044417, 1,
        2044512, 1,
        2044612, 1,
        2044712, 1,
        2046000, 1,
        2046001, 1,
        2046004, 1,
        2046005, 1,
        2046100, 1,
        2046101, 1,
        2046104, 1,
        2046105, 1,
        2046200, 1,
        2046201, 1,
        2046202, 1,
        2046203, 1,
        2046208, 1,
        2046209, 1,
        2046210, 1,
        2046211, 1,
        2046212, 1,
        2046300, 1,
        2046301, 1,
        2046302, 1,
        2046303, 1,
        2047000, 1,
        2047001, 1,
        2047002, 1,
        2047100, 1,
        2047101, 1,
        2047102, 1,
        2047200, 1,
        2047201, 1,
        2047202, 1,
        2047203, 1,
        2047204, 1,
        2047205, 1,
        2047206, 1,
        2047207, 1,
        2047208, 1,
        2047300, 1,
        2047301, 1,
        2047302, 1,
        2047303, 1,
        2047304, 1,
        2047305, 1,
        2047306, 1,
        2047307, 1,
        2047308, 1,
        2047309, 1,
        1112427, 5,
        1112428, 5,
        1112429, 5,
        1012240, 10,
        1022117, 10,
        1032095, 10,
        1112659, 10,
        2070007, 10,
        2330007, 5,
        2070016, 5,
        2070018, 5,
        1152038, 1,
        1152039, 1,
        1152040, 1,
        1152041, 1,
        1122090, 1,
        1122094, 1,
        1122098, 1,
        1122102, 1,
        1012213, 1,
        1012219, 1,
        1012225, 1,
        1012231, 1,
        1012237, 1,
        2070023, 5,
        2070024, 5,
        2330008, 5,
        2003516, 5,
        2003517, 1,
        1132052, 1,
        1132062, 1,
        1132072, 1,
        1132082, 1,
        1112585, 1,
        //walker
        1072502, 1,
        1072503, 1,
        1072504, 1,
        1072505, 1,
        1072506, 1,
        1052333, 1,
        1052334, 1,
        1052335, 1,
        1052336, 1,
        1052337, 1,
        1082305, 1,
        1082306, 1,
        1082307, 1,
        1082308, 1,
        1082309, 1,
        1003197, 1,
        1003198, 1,
        1003199, 1,
        1003200, 1,
        1003201, 1,
        1662000, 1,
        1662001, 1,
        1672000, 1,
        1672001, 1,
        1672002, 1,
        //crescent moon
        1112583, 1,
        1032092, 1,
        1132084, 1,
        //mounts, 90 day
        2430290, 1,
        2430292, 1,
        2430294, 1,
        2430296, 1,
        2430298, 1,
        2430300, 1,
        2430302, 1,
        2430304, 1,
        2430306, 1,
        2430308, 1,
        2430310, 1,
        2430312, 1,
        2430314, 1,
        2430316, 1,
        2430318, 1,
        2430320, 1,
        2430322, 1,
        2430324, 1,
        2430326, 1,
        2430328, 1,
        2430330, 1,
        2430332, 1,
        2430334, 1,
        2430336, 1,
        2430338, 1,
        2430340, 1,
        2430342, 1,
        2430344, 1,
        2430347, 1,
        2430349, 1,
        2430351, 1,
        2430353, 1,
        2430355, 1,
        2430357, 1,
        2430359, 1,
        2430361, 1,
        2430392, 1,
        2430512, 1,
        2430536, 1,
        2430477, 1,
        2430146, 1,
        2430148, 1,
        2430137, 1};
    public static final int[] eventSuperReward = {
        2022121, 10,
        4031307, 50,
        3010127, 10,
        3010128, 10,
        3010137, 10,
        3010157, 10,
        2049300, 10,
        2040758, 10,
        1442057, 10,
        2049402, 10,
        2049304, 1,
        2049305, 1,
        2040759, 7,
        2040760, 5,
        2040125, 10,
        2040126, 10,
        1012191, 5,
        1112514, 1, //untradable/tradable
        1112531, 1,
        1112629, 1,
        1112646, 1,
        1112515, 1, //untradable/tradable
        1112532, 1,
        1112630, 1,
        1112647, 1,
        1112516, 1, //untradable/tradable
        1112533, 1,
        1112631, 1,
        1112648, 1,
        2040045, 10,
        2040046, 10,
        2040333, 10,
        2040429, 10,
        2040542, 10,
        2040543, 10,
        2040629, 10,
        2040755, 10,
        2040756, 10,
        2040757, 10,
        2040833, 10,
        2040834, 10,
        2041068, 10,
        2041069, 10,
        2043022, 12,
        2043120, 12,
        2043220, 12,
        2043313, 12,
        2043713, 12,
        2043813, 12,
        2044028, 12,
        2044120, 12,
        2044220, 12,
        2044320, 12,
        2044520, 12,
        2044513, 12,
        2044613, 12,
        2044713, 12,
        2044817, 12,
        2044910, 12,
        2046002, 5,
        2046003, 5,
        2046102, 5,
        2046103, 5,
        2046204, 10,
        2046205, 10,
        2046206, 10,
        2046207, 10,
        2046304, 10,
        2046305, 10,
        2046306, 10,
        2046307, 10,
        2040006, 2,
        2040007, 2,
        2040303, 2,
        2040403, 2,
        2040506, 2,
        2040507, 2,
        2040603, 2,
        2040709, 2,
        2040710, 2,
        2040711, 2,
        2040806, 2,
        2040903, 2,
        2040913, 2,
        2041024, 2,
        2041025, 2,
        2044815, 2,
        2044908, 2,
        1152046, 1,
        1152047, 1,
        1152048, 1,
        1152049, 1,
        1122091, 1,
        1122095, 1,
        1122099, 1,
        1122103, 1,
        1012214, 1,
        1012220, 1,
        1012226, 1,
        1012232, 1,
        1012238, 1,
        1032088, 1,
        1032089, 1,
        1032090, 1,
        1032091, 1,
        1132053, 1,
        1132063, 1,
        1132073, 1,
        1132083, 1,
        1112586, 1,
        1112593, 1,
        1112597, 1,
        1662002, 1,
        1662003, 1,
        1672003, 1,
        1672004, 1,
        1672005, 1,
        //130, 140 weapons
        1092088, 1,
        1092089, 1,
        1092087, 1,
        1102275, 1,
        1102276, 1,
        1102277, 1,
        1102278, 1,
        1102279, 1,
        1102280, 1,
        1102281, 1,
        1102282, 1,
        1102283, 1,
        1102284, 1,
        1082295, 1,
        1082296, 1,
        1082297, 1,
        1082298, 1,
        1082299, 1,
        1082300, 1,
        1082301, 1,
        1082302, 1,
        1082303, 1,
        1082304, 1,
        1072485, 1,
        1072486, 1,
        1072487, 1,
        1072488, 1,
        1072489, 1,
        1072490, 1,
        1072491, 1,
        1072492, 1,
        1072493, 1,
        1072494, 1,
        1052314, 1,
        1052315, 1,
        1052316, 1,
        1052317, 1,
        1052318, 1,
        1052319, 1,
        1052329, 1,
        1052321, 1,
        1052322, 1,
        1052323, 1,
        1003172, 1,
        1003173, 1,
        1003174, 1,
        1003175, 1,
        1003176, 1,
        1003177, 1,
        1003178, 1,
        1003179, 1,
        1003180, 1,
        1003181, 1,
        1302152, 1,
        1302153, 1,
        1312065, 1,
        1312066, 1,
        1322096, 1,
        1322097, 1,
        1332130, 1,
        1332131, 1,
        1342035, 1,
        1342036, 1,
        1372084, 1,
        1372085, 1,
        1382104, 1,
        1382105, 1,
        1402095, 1,
        1402096, 1,
        1412065, 1,
        1412066, 1,
        1422066, 1,
        1422067, 1,
        1432086, 1,
        1432087, 1,
        1442116, 1,
        1442117, 1,
        1452111, 1,
        1452112, 1,
        1462099, 1,
        1462100, 1,
        1472122, 1,
        1472123, 1,
        1482084, 1,
        1482085, 1,
        1492085, 1,
        1492086, 1,
        1532017, 1,
        1532018, 1,
        //mounts
        2430291, 1,
        2430293, 1,
        2430295, 1,
        2430297, 1,
        2430299, 1,
        2430301, 1,
        2430303, 1,
        2430305, 1,
        2430307, 1,
        2430309, 1,
        2430311, 1,
        2430313, 1,
        2430315, 1,
        2430317, 1,
        2430319, 1,
        2430321, 1,
        2430323, 1,
        2430325, 1,
        2430327, 1,
        2430329, 1,
        2430331, 1,
        2430333, 1,
        2430335, 1,
        2430337, 1,
        2430339, 1,
        2430341, 1,
        2430343, 1,
        2430345, 1,
        2430348, 1,
        2430350, 1,
        2430352, 1,
        2430354, 1,
        2430356, 1,
        2430358, 1,
        2430360, 1,
        2430362, 1,
        //rising sun
        1012239, 1,
        1122104, 1,
        1112584, 1,
        1032093, 1,
        1132085, 1
    };
    public static final int[] tenPercent = {
        //10% scrolls
        2040002, //頭盔防禦卷軸10%
        2040005,
        2040026,
        2040031,
        2040100,
        2040105,
        2040200,
        2040205,
        2040302,
        2040310,
        2040318,
        2040323,
        2040328,
        2040329,
        2040330,
        2040331,
        2040402,
        2040412,
        2040419,
        2040422,
        2040427,
        2040502,
        2040505,
        2040514,
        2040517,
        2040534,
        2040602,
        2040612,
        2040619,
        2040622,
        2040627,
        2040702,
        2040705,
        2040708,
        2040727,
        2040802,
        2040805,
        2040816,
        2040825,
        2040902,
        2040915,
        2040920,
        2040925,
        2040928,
        2040933,
        2041002,
        2041005,
        2041008,
        2041011,
        2041014,
        2041017,
        2041020,
        2041023,
        2041058,
        2041102,
        2041105,
        2041108,
        2041111,
        2041302,
        2041305,
        2041308,
        2041311,
        2043002,
        2043008,
        2043019,
        2043102,
        2043114,
        2043202,
        2043214,
        2043302,
        2043402,
        2043702,
        2043802,
        2044002,
        2044014,
        2044015,
        2044102,
        2044114,
        2044202,
        2044214,
        2044302,
        2044314,
        2044402,
        2044414,
        2044502,
        2044602,
        2044702,
        2044802,
        2044809,
        2044902,
        2045302,
        2048002,
        2048005
    };
    public static final int[] fishingReward = {
        0, 100, // Meso
        1, 100, // EXP
        //2022179, 1, // Onyx Apple
        1302021, 5, // 橡皮鎯頭
        1072238, 1, // 紫色釘鞋
        1072239, 1, // 黃色釘鞋
        2049100, 2, // 混沌卷軸60%
        2430144, 1, // 秘密能手冊
        2290285, 1, // [能手冊]神秘能手冊
        2028062, 1, // 不可思議的配方卷
        2028061, 1, // 不可思議的卷軸卷
        2049301, 1, // 裝備強化卷軸
        2049401, 1, // 潛能附加卷軸
        1302000, 3, // 劍
        1442011, 1, // 衝浪板
        4000517, 8, // 黃金魚
        //4000518, 10, // Golden Fish Egg
        4031627, 2, // 銀魚(3cm)
        4031628, 1, // 旗魚(120cm)
        4031630, 1, // 鯉魚(30cm)
        4031631, 1, // 鮭魚(150cm)
        4031632, 1, // 鏟子
        4031633, 2, // 銀魚(3.6cm)
        4031634, 1, // 銀魚(5cm)
        4031635, 1, // 銀魚(6.5cm)
        4031636, 1, // 銀魚(10cm)
        4031637, 2, // 鯉魚(53cm)
        4031638, 2, // 鯉魚(60cm)
        4031639, 1, // 鯉魚(100cm)
        4031640, 1, // 鯉魚(113cm)
        4031641, 2, // 旗魚(128cm)
        4031642, 2, // 旗魚(131cm)
        4031643, 1, // 旗魚(140cm)
        4031644, 1, // 旗魚(148cm)
        4031645, 2, // 鮭魚(166cm)
        4031646, 2, // 鮭魚(183cm)
        4031647, 1, // 鮭魚(227cm)
        4031648, 1, // 鮭魚(288cm)
        4001187, 20, // 音癡
        4001188, 20, // 舞癡
        4001189, 20, // 拍癡
        4031629, 1 // 鍋子
    };
    private static long[] exp = null;
    private static final int[] closeness = {0, 1, 3, 6, 14, 31, 60, 108, 181, 287, 434, 632, 891, 1224, 1642, 2161, 2793, 3557, 4467, 5542, 6801, 8263, 9950, 11882, 14084, 16578, 19391, 22547, 26074, 30000};
    private static final int[] setScore = {0, 10, 100, 300, 600, 1000, 2000, 4000, 7000, 10000};
    private static final int[] cumulativeTraitExp = {
        0, 20, 46, 80, 124, 181, 255, 351, 476, 639, 851, 1084,
        1340, 1622, 1932, 2273, 2648, 3061, 3515, 4014, 4563, 5128,
        5710, 6309, 6926, 7562, 8217, 8892, 9587, 10303, 11040, 11788,
        12547, 13307, 14089, 14883, 15689, 16507, 17337, 18179, 19034, 19902,
        20783, 21677, 22584, 23505, 24440, 25399, 26362, 27339, 28331, 29338,
        30360, 31397, 32450, 33519, 34604, 35705, 36823, 37958, 39110, 40279,
        41466, 32671, 43894, 45135, 46395, 47674, 48972, 50289, 51626, 52967,
        54312, 55661, 57014, 58371, 59732, 61097, 62466, 63839, 65216, 66597,
        67982, 69371, 70764, 72161, 73562, 74967, 76376, 77789, 79206, 80627,
        82052, 83481, 84914, 86351, 87792, 89237, 90686, 92139, 93596, 96000};
    private static final int[] mobHpVal = {0, 15, 20, 25, 35, 50, 65, 80, 95, 110, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350,
        375, 405, 435, 465, 495, 525, 580, 650, 720, 790, 900, 990, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800,
        1900, 2000, 2100, 2200, 2300, 2400, 2520, 2640, 2760, 2880, 3000, 3200, 3400, 3600, 3800, 4000, 4300, 4600, 4900, 5200,
        5500, 5900, 6300, 6700, 7100, 7500, 8000, 8500, 9000, 9500, 10000, 11000, 12000, 13000, 14000, 15000, 17000, 19000, 21000, 23000,
        25000, 27000, 29000, 31000, 33000, 35000, 37000, 39000, 41000, 43000, 45000, 47000, 49000, 51000, 53000, 55000, 57000, 59000, 61000, 63000,
        65000, 67000, 69000, 71000, 73000, 75000, 77000, 79000, 81000, 83000, 85000, 89000, 91000, 93000, 95000, 97000, 99000, 101000, 103000,
        105000, 107000, 109000, 111000, 113000, 115000, 118000, 120000, 125000, 130000, 135000, 140000, 145000, 150000, 155000, 160000, 165000, 170000, 175000, 180000,
        185000, 190000, 195000, 200000, 205000, 210000, 215000, 220000, 225000, 230000, 235000, 240000, 250000, 260000, 270000, 280000, 290000, 300000, 310000, 320000,
        330000, 340000, 350000, 360000, 370000, 380000, 390000, 400000, 410000, 420000, 430000, 440000, 450000, 460000, 470000, 480000, 490000, 500000, 510000, 520000,
        530000, 550000, 570000, 590000, 610000, 630000, 650000, 670000, 690000, 710000, 730000, 750000, 770000, 790000, 810000, 830000, 850000, 870000, 890000, 910000};
    //PVP經驗
    private static final int[] pvpExp = {0, 3000, 6000, 12000, 24000, 48000, 960000, 192000, 384000, 768000};
    //公會經驗
    private static final int[] guildExp = {0, 20000, 160000, 540000, 1280000, 2500000, 4320000, 6860000, 10240000, 14580000};
    //騎寵經驗
    private static final int[] mountExp = {0, 6, 25, 50, 105, 134, 196, 254, 263, 315, 367, 430, 543, 587, 679, 725, 897, 1146, 1394, 1701, 2247, 2543, 2898, 3156, 3313, 3584, 3923, 4150, 4305, 4550};
    //專業技術經驗
    private static final int[] professionExp = {0, 250, 600, 1050, 1600, 2250, 3000, 3850, 4800, 5850, 45000, 160000};
    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(GameConstants.class);
    //熱門搜索道具
    public static int[] owlItems = {1332052, 2043301, 2040804, 2049100, 1402016, 1382060, 1082002, 2070006, 2290272, 2049301};
    // 等級範圍怪物經驗
    public static long[] lvMobExp = {
            3, 4, 5, 6, 8, 10, 13, 13, 15, 17, // 等級5, 6, 9的為猜測值
            19, 21, 22, 24, 26, 28, 29, 31, 33, 35,
            37, 39, 41, 43, 45, 47, 50, 53, 56, 62,
            67, 73, 79, 77, 95, 100, 103, 107, 112, 116,
            120, 124, 127, 130, 134, 139, 143, 147, 155, 156,
            162, 168, 175, 181, 187, 195, 203, 215, 224, 233,
            244, 256, 267, 278, 289, 302, 315, 329, 342, 355,
            378, 405, 433, 458, 484, 527, 584, 625, 684, 732,
            780, 821, 877, 920, 965, 1012, 1057, 1094, 1145, 1184,
            1230, 1274, 1307, 1350, 1399, 1434, 1480, 1522, 1564, 1601,
            1664, 1729, 1789, 1867, 1914, 1984, 2055, 2120, 2184, 2711,
            2810, 2901, 2963, 3087, 3148, 3255, 3339, 3450, 3510, 3618,
            3708, 3804, 3910, 4012, 4115, 4205, 4350, 4501, 4751, 4996,
            5230, 5608, 5685, 5911, 6138, 6369, 6603, 6836, 7111, 7304,
            7614, 7808, 8094, 8342, 8601, 8891, 9141, 9407, 9758, 9919,
            10244, 10641, 11248, 17514, 12275, 12842, 13327, 13715, 14254, 14981,
            15579, 16094, 16680, 17227, 19710, 18383, 19044, 19717, 20280, 20927,
            21541, 22238, 22718, 23495, 24148, 24859, 25550, 26148, 26865, 27514,
            28941, 30046, 31255, 32568, 35112, 37534, 41179, 43127, 46798, 50419,
            50203, 51853, 53520, 55202, 56902, 58618, 60344, 62262, 64028, 54838,
            56327, 57834, 59514, 61048, 62590, 64150, 65888, 67474, 69068, 70858,
            72478, 74299, 75945, 0, 79468, 81155, 83051, 84758, 86684, 84420,
            90376, 92135, 94119, 95907, 97920, 99953, 101776, 103837, 0, 107770,
            109878, 111994, 113891, 116039, 118208, 120384, 122330, 124538, 126759, 128993,
            131247, 132515, 135530, 137828, 140138, 142461, 144797, 147151, 149518
    };

    static {
        LoadEXP();
    }

    public static void LoadEXP() {
        exp = new long[ServerConfig.CHANNEL_PLAYER_MAXLEVEL + 1];
        int i;
        exp[1] = 15;
        exp[2] = 34;
        exp[3] = 57;
        exp[4] = 92;
        exp[5] = 135;
        exp[6] = 372;
        exp[7] = 560;
        exp[8] = 840;
        exp[9] = 1242;
        for (i = 10; i < 200; ++i) {
            if (i >= 10 && i < 15 || i >= 30 && i < 35 || i >= 60 && i < 65 || i >= 100 && i < 105) {
                exp[i] = exp[i - 1];
            } else {
                exp[i] = (long) ((double) exp[i - 1] * (i < 40 ? 1.2 : i < 65 ? 1.08 : i < 75 ? 1.075 : i < 90 ? 1.07 : i < 140 ? 1.065 : 1.0625));
            }
        }
        exp[170] = 138750435L;
        for (i = 171; i < 200; i++) {
            exp[i] = (long) (exp[i - 1] * 1.05D);
        }
        for (i = 200; i < exp.length; ++i) {
            switch (i) {
                case 200:
                    exp[i] = 2207026470L;
                    break;
                case 250:
                    exp[i] = 1004220024186L;
                    break;
                case 260:
                    exp[i] = 2902427248153L;
                    break;
                case 210:
                case 220:
                case 230:
                case 240:
                    exp[i] = (long) (exp[i - 1] * 1.60);
                    break;
                case 215:
                case 225:
                case 235:
                case 245:
                    exp[i] = (long) (exp[i - 1] * 1.30);
                    break;
                case 270:
                case 275:
                case 280:
                case 285:
                case 290:
                case 295:
                    exp[i] = (long) (exp[i - 1] * 2.02);
                    break;
                case 299:
                    exp[i] = (long) (exp[i - 1] * 1.50);
                    break;
                default:
                    if (i < 210) {
                        exp[i] = (long) (exp[i - 1] * 1.12);
                    } else if (i < 215) {
                        exp[i] = (long) (exp[i - 1] * 1.11);
                    } else if (i < 220) {
                        exp[i] = (long) (exp[i - 1] * 1.09);
                    } else if (i < 225) {
                        exp[i] = (long) (exp[i - 1] * 1.07);
                    } else if (i < 230) {
                        exp[i] = (long) (exp[i - 1] * 1.05);
                    } else if (i < 260) {
                        exp[i] = (long) (exp[i - 1] * 1.03);
                    } else if (i < 275) {
                        exp[i] = (long) (exp[i - 1] * 1.01);
                    } else { // i > 275
                        exp[i] = (long) (exp[i - 1] * 1.10);
                    }
                    break;
            }
        }
        exp[exp.length - 1] = 1;
    }

    public static long getExpNeededForLevel(int level) {
        if (level < 0 || level >= exp.length) {
            return Long.MAX_VALUE;
        }
        return exp[level];
    }

    public static int getGuildExpNeededForLevel(int level) {
        if (level < 0 || level >= guildExp.length) {
            return Integer.MAX_VALUE;
        }
        return guildExp[level];
    }

    public static int getPVPExpNeededForLevel(int level) {
        if (level < 0 || level >= pvpExp.length) {
            return Integer.MAX_VALUE;
        }
        return pvpExp[level];
    }

    public static int getClosenessNeededForLevel(int level) {
        return closeness[level - 1];
    }

    public static int getMountExpNeededForLevel(int level) {
        return mountExp[level - 1];
    }

    public static int getTraitExpNeededForLevel(int level) {
        if (level < 0 || level >= cumulativeTraitExp.length) {
            return Integer.MAX_VALUE;
        }
        return cumulativeTraitExp[level];
    }

    public static int getSetExpNeededForLevel(int level) {
        if (level < 0 || level >= setScore.length) {
            return Integer.MAX_VALUE;
        }
        return setScore[level];
    }

    public static int getMonsterHP(int level) {
        if (level >= mobHpVal.length) {
            return 5000000 * (level - 198);
        }
        if (level < 0) {
            return Integer.MAX_VALUE;
        }
        return mobHpVal[level];
    }

    public static int getBookLevel(int level) {
        return (5 * level) * (level + 1);
    }

    public static int getTimelessRequiredEXP(int level) {
        return 70 + (level * 10);
    }

    public static int getReverseRequiredEXP(int level) {
        return 60 + (level * 5);
    }

    public static int getProfessionEXP(int level) {
        if (level < 0 || level >= professionExp.length) {
            return Integer.MAX_VALUE;
        }
        return professionExp[level];
        //return (100 * level * level) + (level * 400);
    }

    public static int maxViewRange() {
        int width = 1366;
        int height = 768;
        return (int) Math.ceil(Math.pow(Math.pow(width, 2) + Math.pow(height, 2), (1d / 2)));
    }

    public static int maxViewRange_Half() {
        return maxViewRange() / 2;
    }

    public static boolean isCustomQuest(int id) {
        return id > 99999;
    }

    public static int getTaxAmount(int meso) {
        if (meso >= 100000000) {
            return (int) Math.round(0.06 * meso);
        } else if (meso >= 25000000) {
            return (int) Math.round(0.05 * meso);
        } else if (meso >= 10000000) {
            return (int) Math.round(0.04 * meso);
        } else if (meso >= 5000000) {
            return (int) Math.round(0.03 * meso);
        } else if (meso >= 1000000) {
            return (int) Math.round(0.018 * meso);
        } else if (meso >= 100000) {
            return (int) Math.round(0.008 * meso);
        }
        return 0;
    }

    public static int EntrustedStoreTax(long meso) {
        if (meso >= 100000000) {
            return (int) Math.round(0.03 * meso);
        } else if (meso >= 25000000) {
            return (int) Math.round(0.025 * meso);
        } else if (meso >= 10000000) {
            return (int) Math.round(0.02 * meso);
        } else if (meso >= 5000000) {
            return (int) Math.round(0.015 * meso);
        } else if (meso >= 1000000) {
            return (int) Math.round(0.009 * meso);
        } else if (meso >= 100000) {
            return (int) Math.round(0.004 * meso);
        }
        return 0;
    }

    public static byte gachaponRareItem(int id) {
        switch (id) {
            case 2340000: // 祝福卷軸
            case 2049100: // 混沌卷軸60%
            case 2049000: // 白醫卷軸
            case 2049001: // 白醫卷軸
            case 2049002: // 白醫卷軸
            case 2040006: // 詛咒白醫卷軸
            case 2040007: // 詛咒白醫卷軸
            case 2040303: // 耳環智力必成卷
            case 2040403: // 上衣防禦必成卷
            case 2040506: // 全身盔甲敏捷必成卷
            case 2040507: // 全身盔甲防禦必成卷
            case 2040603: // 褲裙防禦必成卷
            case 2040709: // 鞋子敏捷必成卷
            case 2040710: // 鞋子跳躍必成卷
            case 2040711: // 鞋子速度必成卷
            case 2040806: // 手套敏捷必成卷
            case 2040903: // 盾牌防禦必成卷
            case 2041024: // 披風魔法防禦必成卷
            case 2041025: // 披風物理防禦必成卷
            case 2043003: // 單手劍攻擊必成卷
            case 2043103: // 單手斧攻擊必成卷
            case 2043203: // 單手鈍器攻擊必成卷
            case 2043303: // 短劍攻擊必成卷
            case 2043703: // 短杖攻擊必成卷
            case 2043803: // 長杖攻擊必成卷
            case 2044003: // 雙手劍攻擊必成卷
            case 2044103: // 雙手斧攻擊必成卷
            case 2044203: // 雙手鈍器攻擊必成卷
            case 2044303: // 槍攻擊必成卷
            case 2044403: // 矛攻擊必成卷
            case 2044503: // 弓攻擊必成卷
            case 2044603: // 弩攻擊必成卷
            case 2044908: // 短槍攻擊必成卷
            case 2044815: // 指節攻擊必成卷
            case 2044019: // 雙手劍魔力必成卷
            case 2044703: // 拳套攻擊必成卷
            //--------------------
            case 2290096: // [能手冊]楓之谷勇士 20
            case 1402037: // 龍背刃
            case 1132012: // 法老的腰帶
            case 1132013: // 不滅的法老腰帶
            case 1032084: // 至尊不速之客耳環
            case 1112439: // 至尊不速之客戒指
            case 1122085: // 至尊不速之客項鏈
            case 1132040: // 至尊不速之客腰帶
            case 1092074: // 至尊不速之客劍士盾
            case 1092079: // 至尊不速之客法師盾
            case 1092084: // 至尊不速之客盜賊盾
            case 1092087: // 戰神勇士盾
            case 1092088: // 戰神黑暗盾
            case 1302147: // 至尊不速之客單手劍
            case 1312062: // 至尊不速之客單手斧
            case 1322090: // 至尊不速之客單手鈍器
            case 1332120: // 至尊不速之客短劍-運
            case 1332125: // 至尊不速之客短劍-力
            case 1342033: // 至尊不速之客刀
            case 1372078: // 至尊不速之客短杖
            case 1382099: // 至尊不速之客長杖
            case 1402090: // 至尊不速之客雙手劍
            case 1412062: // 至尊不速之客雙手斧
            case 1422063: // 至尊不速之客雙手鈍器
            case 1432081: // 至尊不速之客槍
            case 1442111: // 至尊不速之客矛
            case 1452106: // 至尊不速之客弓
            case 1462091: // 至尊不速之客弩
            case 1472117: // 至尊不速之客拳套
            case 1482079: // 至尊不速之客指節
            case 1492079: // 至尊不速之客短槍
            //--------------------------------
            case 1002790: //重生冠軍盔
            case 1002791: //重生玄妙帽
            case 1002792: //重生霓翎帽
            case 1002793: //重生迷蹤帽
            case 1002794: //重生海王星
            case 1082239: //重生定邊手套
            case 1082240: //重生逍遙手套
            case 1082241: //重生白雲手套
            case 1082242: //重生探雲手套
            case 1082243: //重生撫浪手套
            case 1052160: //重生演武鎧
            case 1052161: //重生奧神袍
            case 1052162: //重生巡禮者
            case 1052163: //重生翻雲服
            case 1052164: //重生霸七海
            case 1072361: //重生堅壁靴
            case 1072362: //重生縹緲鞋
            case 1072363: //重生彩虹鞋
            case 1072364: //重生舞空靴
            case 1072365: //重生定海靴
            case 1302086: //重生破甲劍
            case 1312038: //重生斷蚺斧
            case 1322061: //重生驚破天
            case 1332075: //重生狂鯊鋸
            case 1332076: //重生斷首刃
            case 1372045: //重生蝶翼杖
            case 1382059: //重生冰輪杖
            case 1402047: //重生玄冥劍
            case 1412034: //重生碎黿斧
            case 1422038: //重生威震天
            case 1432049: //重生顯聖槍
            case 1442067: //重生神光戟
            case 1452059: //重生驚電弓
            case 1462051: //重生冥雷弩
            case 1472071: //重生大悲賦
            case 1482024: //重生孔雀翎
            case 1492025: //重生鳳凰銃
            case 1342012: //重生之刃
            case 1942002: //重生面罩
            case 1952002: //重生吊墜
            case 1962002: //重生飛翼
            case 1972002: //重生尾巴
            case 1522016: //重生鮮花弩槍
            case 1532016: //重生拯救者
            //-------------------------
            case 1032031: //永恆金盾墜
            case 1102172: //永恆不滅披風
            case 1002776: //永恆冠軍盔
            case 1002777: //永恆玄妙帽
            case 1002778: //永恆霓翎帽
            case 1002779: //永恆迷蹤帽
            case 1002780: //永恆海王星
            case 1082234: //永恆定邊手套
            case 1082235: //永恆逍遙手套
            case 1082236: //永恆白雲手套
            case 1082237: //永恆探雲手套
            case 1082238: //永恆撫浪手套
            case 1052155: //永恆演武鎧
            case 1052156: //永恆奧神袍
            case 1052157: //永恆巡禮者
            case 1052158: //永恆翻雲服
            case 1052159: //永恆霸七海
            case 1072355: //永恆堅壁靴
            case 1072356: //永恆縹緲鞋
            case 1072357: //永恆彩虹鞋
            case 1072358: //永恆舞空靴
            case 1072359: //永恆定海靴
            case 1092057: //永恆魔光盾
            case 1092058: //永恆寒冰盾
            case 1092059: //永恆匿蹤盾
            case 1122011: //封印的永恆玉珮
            case 1122012: //永恆玉珮
            case 1302081: //永恆破甲劍
            case 1312037: //永恆斷蚺斧
            case 1322060: //永恆驚破天
            case 1332073: //永恆狂鯊鋸
            case 1332074: //永恆斷首刃
            case 1372044: //永恆蝶翼杖
            case 1382057: //永恆冰輪杖
            case 1402046: //永恆玄冥劍
            case 1412033: //永恆碎黿斧
            case 1422037: //永恆威震天
            case 1432047: //永恆顯聖槍
            case 1442063: //永恆神光戟
            case 1452057: //永恆驚電弓
            case 1462050: //永恆冥雷弩
            case 1472068: //永恆大悲賦
            case 1482023: //永恆孔雀翎
            case 1492023: //永恆鳳凰銃
            case 1342011: //永恆之刃
            case 1522015: //永恆鮮花弩槍
            case 1532015: //永恆拯救者
            //-------------------------
            //頭盔
            case 1003280: //深淵冠軍盔
            case 1003281: //深淵玄妙帽
            case 1003282: //深淵霓翎帽
            case 1003283: //深淵迷蹤帽
            case 1003284: //深淵海王星
            //衣服
            case 1052374: //深淵演武鎧
            case 1052375: //深淵奧神袍
            case 1052376: //深淵巡禮者
            case 1052377: //深淵翻雲服
            case 1052378: //深淵霸七海
            //鞋子
            case 1072544: //深淵堅壁靴
            case 1072545: //深淵縹緲鞋
            case 1072546: //深淵彩虹鞋
            case 1072547: //深淵舞空靴
            case 1072548: //深淵定海靴
            //手套
            case 1082328: //深淵定邊手套
            case 1082329: //深淵逍遙手套
            case 1082330: //深淵白雲手套
            case 1082331: //深淵探雲手套
            case 1082332: //深淵撫浪手套
            //武器
            case 1302173: //深淵破甲劍
            case 1312072: //深淵斷蚺斧
            case 1322107: //深淵驚破天
            case 1332148: //深淵狂鯊鋸
            case 1332149: //深淵斷首刃
            case 1342040: //深淵之刃
            case 1372100: //深淵蝶翼杖
            case 1382124: //深淵冰輪杖
            case 1402111: //深淵玄冥劍
            case 1412071: //深淵碎黿斧
            case 1422073: //深淵威震天
            case 1432099: //深淵顯聖槍
            case 1442136: //深淵神光戟
            case 1452129: //深淵驚電弓
            case 1462118: //深淵冥雷弩
            case 1472141: //深淵大悲賦
            case 1482102: //深淵孔雀翎
            case 1492101: //深淵鳳凰銃
            case 1522020: //深淵鮮花弩槍
            case 1532037: //深淵拯救者
            case 1942004: //深淵面罩
            case 1952004: //深淵吊墜
            case 1962004: //深淵之翼
            case 1972004: //深淵之尾
                return 2;
            //1 = wedding msg o.o
        }
        return 1;
    }

    public static boolean isReverseItem(int itemId) {
        switch (itemId) {
            case 1002790: //重生冠軍盔
            case 1002791: //重生玄妙帽
            case 1002792: //重生霓翎帽
            case 1002793: //重生迷蹤帽
            case 1002794: //重生海王星
            case 1082239: //重生定邊手套
            case 1082240: //重生逍遙手套
            case 1082241: //重生白雲手套
            case 1082242: //重生探雲手套
            case 1082243: //重生撫浪手套
            case 1052160: //重生演武鎧
            case 1052161: //重生奧神袍
            case 1052162: //重生巡禮者
            case 1052163: //重生翻雲服
            case 1052164: //重生霸七海
            case 1072361: //重生堅壁靴
            case 1072362: //重生縹緲鞋
            case 1072363: //重生彩虹鞋
            case 1072364: //重生舞空靴
            case 1072365: //重生定海靴

            case 1302086: //重生破甲劍
            case 1312038: //重生斷蚺斧
            case 1322061: //重生驚破天
            case 1332075: //重生狂鯊鋸
            case 1332076: //重生斷首刃
            case 1372045: //重生蝶翼杖
            case 1382059: //重生冰輪杖
            case 1402047: //重生玄冥劍
            case 1412034: //重生碎黿斧
            case 1422038: //重生威震天
            case 1432049: //重生顯聖槍
            case 1442067: //重生神光戟
            case 1452059: //重生驚電弓
            case 1462051: //重生冥雷弩
            case 1472071: //重生大悲賦
            case 1482024: //重生孔雀翎
            case 1492025: //重生鳳凰銃

            case 1342012: //重生之刃
            case 1942002: //重生面罩
            case 1952002: //重生吊墜
            case 1962002: //重生飛翼
            case 1972002: //重生尾巴
            case 1522016: //重生鮮花弩槍
            case 1532016: //重生拯救者
                return true;
            default:
                return false;
        }
    }

    public static boolean isTimelessItem(int itemId) {
        switch (itemId) {
            case 1032031: //永恆金盾墜
            case 1102172: //永恆不滅披風
            case 1002776: //永恆冠軍盔
            case 1002777: //永恆玄妙帽
            case 1002778: //永恆霓翎帽
            case 1002779: //永恆迷蹤帽
            case 1002780: //永恆海王星
            case 1082234: //永恆定邊手套
            case 1082235: //永恆逍遙手套
            case 1082236: //永恆白雲手套
            case 1082237: //永恆探雲手套
            case 1082238: //永恆撫浪手套
            case 1052155: //永恆演武鎧
            case 1052156: //永恆奧神袍
            case 1052157: //永恆巡禮者
            case 1052158: //永恆翻雲服
            case 1052159: //永恆霸七海
            case 1072355: //永恆堅壁靴
            case 1072356: //永恆縹緲鞋
            case 1072357: //永恆彩虹鞋
            case 1072358: //永恆舞空靴
            case 1072359: //永恆定海靴
            case 1092057: //永恆魔光盾
            case 1092058: //永恆寒冰盾
            case 1092059: //永恆匿蹤盾

            case 1122011: //封印的永恆玉珮
            case 1122012: //永恆玉珮

            case 1302081: //永恆破甲劍
            case 1312037: //永恆斷蚺斧
            case 1322060: //永恆驚破天
            case 1332073: //永恆狂鯊鋸
            case 1332074: //永恆斷首刃
            case 1372044: //永恆蝶翼杖
            case 1382057: //永恆冰輪杖
            case 1402046: //永恆玄冥劍
            case 1412033: //永恆碎黿斧
            case 1422037: //永恆威震天
            case 1432047: //永恆顯聖槍
            case 1442063: //永恆神光戟
            case 1452057: //永恆驚電弓
            case 1462050: //永恆冥雷弩
            case 1472068: //永恆大悲賦
            case 1482023: //永恆孔雀翎
            case 1492023: //永恆鳳凰銃
            case 1342011: //永恆之刃
            case 1522015: //永恆鮮花弩槍
            case 1532015: //永恆拯救者
                return true;
            default:
                return false;
        }
    }

    public static int getStatChance() {
        return 25;
    }

    public static MonsterStatus getStatFromWeapon(int itemid) {
        switch (itemid) {
            case 1302109: // 焰光劍
            case 1312041: // 焰光劍
            case 1322067: // 焰光劍
            case 1332083: // 焰光劍
            case 1372048: // 焰光劍
            case 1382064: // 焰光劍
            case 1402055: // 焰光劍
            case 1412037: // 焰光劍
            case 1422041: // 焰光劍
            case 1432052: // 焰光劍
            case 1442073: // 焰光劍
            case 1452064: // 焰光劍
            case 1462058: // 焰光劍
            case 1472079: // 焰光劍
            case 1482035: // 焰之劍
                return MonsterStatus.Blind;
            case 1302108: // 雷光劍
            case 1312040: // 雷光劍
            case 1322066: // 雷光劍
            case 1332082: // 雷光劍
            case 1372047: // 雷光劍
            case 1382063: // 雷光劍
            case 1402054: // 雷光劍
            case 1412036: // 雷光劍
            case 1422040: // 雷光劍
            case 1432051: // 雷光劍
            case 1442072: // 雷光劍
            case 1452063: // 雷光劍
            case 1462057: // 雷光劍
            case 1472078: // 星之劍
            case 1482036: // 星之劍
                return MonsterStatus.Speed;
        }
        return null;
    }

    public static boolean isSealedEquip(int itemid) {
        for (int i : sealedEquip) {
            if (itemid == i) {
                return true;
            }
        }
        return false;
    }

    public static int getXForStat(MonsterStatus stat) {
        switch (stat) {
            case Blind:
                return -70;
            case Speed:
                return -50;
        }
        return 0;
    }

    public static int getLinkedMountItem(int sourceid) {
        if (sourceid / 10000 == 8000) {
            switch (sourceid % 1000) {
                case 1:
                case 24:
                case 25:
                    return 1018;
                case 2:
                case 26:
                    return 1019;
                case 3:
                    return 1025;
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                    return (sourceid % 1000) + 1023;
                case 9:
                case 10:
                case 11:
                    return (sourceid % 1000) + 1024;
                case 12:
                    return 1042;
                case 13:
                    return 1044;
                case 14:
                    return 1049;
                case 15:
                case 16:
                case 17:
                    return (sourceid % 1000) + 1036;
                case 18:
                case 19:
                    return (sourceid % 1000) + 1045;
                case 20:
                    return 1072;
                case 21:
                    return 1084;
                case 22:
                    return 1089;
                case 23:
                    return 1106;
                case 29:
                    return 1151;
                case 30:
                case 50:
                    return 1054;
                case 33: //33 = hot air
                    return 1932057;
                case 37: //獨角獸比約騎寵
                    return 1932084;
                case 38: //38 = speedy chariot
                    return 1932088;
                case 39: //飛馬
                    return 1932089;
                case 31:
                case 51:
                    return 1069;
                case 32:
                    return 1138;
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                    return (sourceid % 1000) + 1009;
                case 52:
                    return 1070;
                case 53:
                    return 1071;
                case 55:
                    return 1101;
                case 56:
                    return 1102;
                case 58:
                    return 1118;
                case 59:
                    return 1121;
                case 60:
                    return 1122;
                case 61:
                    return 1129;
                case 62:
                    return 1139;
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                    return (sourceid % 1000) + 1080;
                case 82: //水牛騎寵
                    return 1932093;
                case 83: //兔車騎寵
                    return 1932094;
                case 84: //超級兔子騎寵
                    return 1932095;
                case 85:
                case 86:
                case 87:
                    return (sourceid % 1000) + 928;
                case 88:
                    return 1065;
                case 90: //印第安豬
                    return 1932096;
                case 27:
                    return 1932049; //airplane
                case 28:
                    return 1932050; //airplane
                case 111: //貓頭鷹
                    return 1932038;
                case 112: //熊貓
                    return 1932097;
                case 113: //企鵝
                    return 1932098;
                case 114: //GO兔冒險
                    return 1932099;
                case 115: //無辜水牛
                    return 1932065;
                case 116: //玩具坦克
                    return 1932066;
                case 117: //打豆豆機器人
                    return 1932072;
                case 118: //萊格斯的豺犬
                    return 1932078;
                case 119: //跑車
                    return 1932080;
                case 120: //國慶紀念熱氣球
                    return 1992015;
                case 121: //赤兔馬
                    return 1932092;
                case 124: //貓貓海賊船
                    return 1932105;
                case 142: //好朋友坐騎
                    return 1932112;
                case 181: //藏獒騎寵
                    return 1932091;
                case 194:
                    return 1932137;
                case 195:
                    return 1932138;
                case 196:
                    return 1932139;
                case 198:
                    return 1932140;
                case 199:
                    return 1932141;
                case 220:
                    return 1932143;
                case 221:
                    return 1932144;
                case 228:
                    return 1932148;
                case 237:
                    return 1932153;
                case 240:
                    return 1932154;
                case 243:
                    return 1932156;
                case 245:
                    return 1932158;
                case 330:
                    return 1992030;
                case 410:
                    return 1992033;
                //37 = bjorn
                //57 = law officer
                //they all have in wz so its ok
                default:
                    return 0;
            }
        } else if (sourceid / 10000 == 8001) {
//            switch (sourceid % 10000) {
//                case 1030:
//            }
        }
        return 0;
    }

    public static int getMountItem(int sourceid, MapleCharacter chr) {
        switch (sourceid) {
            case 狂豹獵人.美洲豹騎乘:
                if (chr == null) {
                    return 1932015;
                }
                switch (chr.getIntNoRecord(JAGUAR)) {
                    case 20:
                        return 1932030;
                    case 30:
                        return 1932031;
                    case 40:
                        return 1932032;
                    case 50:
                        return 1932033;
                    case 60:
                        return 1932036; //劍齒豹
                    case 70:
                        return 1932100; //雪豹
                    case 80:
                        return 1932149;
                    case 90:
                        return 1932215;
                }
                return 1932015;
            case 機甲戰神.合金盔甲_人型:
            case 機甲戰神.合金盔甲_戰車:
            case 機甲戰神.合金盔甲終極:
                return 1932016;
            case 惡魔.魔族之翼:
                return 1932051;
            case 惡魔.特化魔族之翼:
                return 1932085;
            case 20021160: //希比迪亞 - [最高等級：1]\n可以召喚並騎著精靈的朋友獨角獸希比迪亞移動。
                return 1932086;
            case 20021161: //希比迪亞 - [最高等級：1]\n可以召喚並騎著精靈的朋友獨角獸希比迪亞移動。可以召喚更強的希比迪亞。
                return 1932087;
            case 20031160: //老爺車 - [最高等級：1]\n可以開著幻影的專用車老爺車移動。
                return 1932106;
            case 20031161: //雲舟 - [最高等級：1]\n可以開著幻影的專用車雲舟移動。
                return 1932107;
            default:
                if (SkillFactory.getMountLinkId(sourceid) > 0) {
                    return SkillFactory.getMountLinkId(sourceid);
                }

        }
        if (!JobConstants.is零轉職業(sourceid / 10000) || !SkillConstants.isLinkSkills(sourceid)) {
            if ((sourceid / 10000 == 8000 || sourceid / 10000 == 8001) && sourceid != 80001000) { //todoo clean up
                Skill skil = SkillFactory.getSkill(sourceid);
                if (skil != null && skil.getTamingMob() > 0) {
                    return skil.getTamingMob();
                } else if (skil != null && skil.getVehicleID() > 0) {
                    return skil.getVehicleID();
                } else {
                    int link = getLinkedMountItem(sourceid);
                    if (link > 0) {
                        if (link < 10000) {
                            return getMountItem(link, chr);
                        } else {
                            return link;
                        }
                    } else {
                        return SkillFactory.getMountLinkId(sourceid);
                    }
                }
            }
            return 0;
        }
        switch (sourceid % 10000) {
            case 1013: //宇宙船
            case 1046: //宇宙船
                return 1932001;
            case 1015: //太空射線
            case 1048:
                return 1932002;
            case 1016: //鱷魚王
            case 1017: //鱷魚王
            case 1027: //鱷魚王
                return 1932007;
            case 1018: //白雪人騎寵
                return 1932003;
            case 1019: //魔女的掃把
                return 1932005;
            case 1025: //玩具木馬
                return 1932006;
            case 1028:
                return 1932008;
            case 1029: //女女機車
                return 1932009;
            case 1030: //觔斗雲
                return 1932011;
            case 1031: //巴洛古
                return 1932010;
            case 1033: //賽車
                return 1932013;
            case 1034: //老虎只是傳說
                return 1932014;
            case 1035: //蝙蝠魔先生
                return 1932012;
            case 1036: //獅子王
                return 1932017;
            case 1037: //獨角獸
                return 1932018;
            case 1038:
                return 1932019;
            case 1039: //田園紅卡車
                return 1932020;
            case 1040: //惡魔石像
                return 1932021;
            case 1042: //聖獸 提拉奧斯
                return 1932022;
            case 1044: //花蘑菇
                return 1932023;
            //case 1045:
            //return 1932030; //wth? helicopter? i didnt see one, so we use hog
            case 1049: //夢魘
                return 1932025;
            case 1050: //白雪人
                return 1932004;
            case 1051: //鴕鳥
                return 1932026;
            case 1052: //粉紅熊熱氣球
                return 1932027;
            case 1053: //鋼鐵變形俠
                return 1932028;
            case 1054: //走路雞
                return 1932029;
            case 1063: //暴風摩托
                return 1932034;
            case 1064: //機械套裝
                return 1932035;
            case 1065:
                return 1932037;
            case 1069: //貓頭鷹
                return 1932038;
            case 1070:
                return 1932039;
            case 1071:
                return 1932040;
            case 1072: //雄獅騎寵
                return 1932041;
            case 1084: //藍色機車
                return 1932043;
            case 1089: //聖誕雪橇
                return 1932044;
            case 1096: //巨無霸兔子
                return 1932045;
            case 1101: //兔兔加油
                return 1932046;
            case 1102: //兔子車伕
                return 1932047;
            case 1106: //福袋
                return 1932048;
            case 1115: //警車
                return 1932052;
            case 1118: //妮娜的魔法陣
                return 1932060;
            case 1121: //青蛙
                return 1932063;
            case 1122: //小龜龜
                return 1932064;
            case 1123: //無辜水牛
                return 1932065;
            case 1124: //玩具坦克
                return 1932066;
            case 1129: //維京戰車
                return 1932071;
            case 1130: //打豆豆機器人
                return 1932072;
            case 1136: //萊格斯的豺犬
                return 1932078;
            case 1138: //跑車
                return 1932080;
            case 1139: //拿破侖的白馬
                return 1932081;
            //FLYING
            case 1143: //赤羚龍
            case 1144: //提拉奧斯
            case 1145: //熱氣球
            case 1146: //飛船
            case 1147: //天馬
            case 1148: //暗光龍
            case 1149: //魔法掃帚
            case 1150: //觔斗雲
            case 1151: //騎士團戰車
            case 1152: //夢魘
            case 1153: //透明巴洛古
            case 1154: //巴洛古
            case 1155: //瑪瑙龍（3階）
            case 1156: //貓頭鷹
            case 1157: //直升機
                return 1992000 + (sourceid % 10000) - 1143;
            default:
                return SkillFactory.getMountLinkId(sourceid);
        }
    }

    public static int getPotentialStats(int potentialID) {
        if (potentialID >= 40000) {
            return 20;
        } else if (potentialID >= 30000) {
            return 19;
        } else if (potentialID >= 20000) {
            return 18;
        } else if (potentialID >= 1) {
            return 17;
        }
        return -1;
    }

    public static boolean isBlockedPotential(Equip equip, int potentialID, boolean add, boolean b3) {
//        if (MapleItemInformationProvider.getInstance().isSuperiorEquip(equip.getItemId())) {//如果是極真裝備
//
//        }
        final int type = potentialID / 1000 % 10;
        if ((add && (type != 2)) || (!add && type == 2)) {
            return false;
        }
        if ((potentialID % 1000 <= 14 || potentialID % 1000 == 81)) {
            return false;
        }
        return true;
    }

    public static boolean potentialIDFits(int potentialID, int newstate, int i) {
        /*
         * 15 = 未鑒定 16以下 20以上都是未鑒定
         * 16 = C級
         * 17 = B級
         * 18 = A級
         * 19 = S級
         * 20 = SS級
         * first line is always the best
         * but, sometimes it is possible to get second/third line as well
         * may seem like big chance, but it's not as it grabs random potential ID anyway
         */
        if (newstate == 20) {
            return (i == 1 || Randomizer.nextInt(1000) < CubeConfig.CUBE_SS_RATE) ? (potentialID >= 40000) : (potentialID >= 30000 && potentialID < 40000);
        }
        if (newstate == 19) {
            return (i == 1 || Randomizer.nextInt(1000) < CubeConfig.CUBE_SS_RATE) ? (potentialID >= 30000 && potentialID < 40000) : (potentialID >= 20000 && potentialID < 30000);
        }
        if (newstate == 18) {
            return (i == 1 || Randomizer.nextInt(1000) < CubeConfig.CUBE_SS_RATE) ? (potentialID >= 20000 && potentialID < 30000) : (potentialID >= 10000 && potentialID < 20000);
        }
        return newstate == 17 && (potentialID >= 10000 && potentialID < 20000);
    }

    public static boolean optionTypeFits(int optionType, int itemId) {
        switch (optionType) {
            case 10: //武器
                return ItemConstants.類型.武器(itemId) || ItemConstants.類型.副手(itemId) || ItemConstants.類型.胸章(itemId) || ItemConstants.類型.能源(itemId);
            case 11: //所有盔甲 除了武器
                return !ItemConstants.類型.武器(itemId);
            case 20: //盾牌
                return !ItemConstants.類型.武器(itemId) || !ItemConstants.類型.飾品(itemId);
            case 21: //寵物裝備
                return ItemConstants.類型.寵物裝備(itemId);
            case 40: //配飾
                return ItemConstants.類型.飾品(itemId);
            case 51: //帽子
                return ItemConstants.類型.帽子(itemId);
            case 52: //披風
                return ItemConstants.類型.披風(itemId);
            case 53: //上衣/褲裙/套服
                return ItemConstants.類型.上衣(itemId) || ItemConstants.類型.套服(itemId) || ItemConstants.類型.褲裙(itemId);
            case 54: //手套
                return ItemConstants.類型.手套(itemId);
            case 55: //鞋子
                return ItemConstants.類型.鞋子(itemId);
            case 90:
                return false; //half this stuff doesnt even work
            default:
                return true;
        }
    }

    public static boolean isAboveA(final int optionID) {
        return optionID > 50000 || optionID < 10001;
    }

    public static short a(final int n, final Equip equip) {
        short n2 = 0;
        for (int i = 0; i < ItemConstants.靈魂結晶.length; ++i) {
            if (ItemConstants.靈魂結晶[i] == n) {
                n2 = ItemConstants.靈魂結晶技能[i];
                break;
            }
        }
        if (n2 == 0) {
            MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
            final int n3 = ii.getReqLevel(equip.getItemId()) / 10;
            for (int j = 0; j == 0; j = 1) {
                final List<List<StructItemOption>> list = new LinkedList<>(ii.getAllPotentialInfo().values());
                final StructItemOption itemOption = list.get(Randomizer.nextInt(list.size())).get(n3);
                if (itemOption != null && itemOption.reqLevel / 10 <= n3 && optionTypeFits(itemOption.optionType, equip.getItemId()) && potentialIDFits(itemOption.opID, 19, 1) && isBlockedPotential(equip, itemOption.opID, false, false)) {
                    n2 = (short) itemOption.opID;
                }
            }
        }
        return n2;
    }

    public static boolean optionTypeFitsX(int potentialID, int itemId) {
        switch (potentialID) {
            case 60001: //總傷害：+#incDAMr%
            case 60003: //攻擊BOSS時，傷害：+#incDAMr%
            case 60008: //攻擊力/魔力：+#incPAD
            case 60009: //總傷害：+#incDAMr%
            case 60010: //攻擊時，無視怪物#ignoreTargetDEF%的防禦率
            case 60011: //攻擊BOSS時造成的傷害：+#incDAMr%
            case 60012: //爆擊率:+#incCr%
            case 60013: //攻擊時，有#prop%的概率造成#level級中毒效果
            case 60014: //攻擊時，有#prop%的概率造成#level級眩暈效果
            case 60015: //攻擊時，有#prop%的概率造成#level級減速效果
            case 60016: //攻擊時，有#prop%的概率造成#level級暗黑效果
            case 60017: //攻擊時，有#prop%的概率造成#level級冰凍效果
            case 60018: //攻擊時，有#prop%的概率造成#level級封印效果
            case 60019: //爆擊率：+#incCr%
            case 60020: //爆擊最小傷害：+#incCriticaldamageMin%
            case 60021: //爆擊最大傷害：+#incCriticaldamageMax%
            case 60023: //攻擊時，無視怪物防禦力#ignoreTargetDEF%
            case 60024: //攻擊BOSS時傷害：+#incDAMr%
            case 60025: //攻擊力：+#incPADr%
            case 60026: //魔法攻擊力：+#incMADr%
            case 60027: //攻擊時無視怪物#ignoreTargetDEF%的防禦
                return ItemConstants.類型.武器(itemId) || ItemConstants.類型.副手(itemId);
            case 60002: //所有屬性：+#incSTRr%
            case 60004: //所有屬性：+#incSTRr%
            case 60005: //所有屬性：+#incSTRr%
                return true;
            default:
                return true;
        }
    }

    public static boolean isMountItemAvailable(int mountid, int jobid) {
        if (jobid != 900 && mountid / 10000 == 190) {
            switch (mountid) {
                case 1902000: //小浣豬
                case 1902001: //銀色野豬
                case 1902002: //赤羚龍
                    return JobConstants.is冒險家(jobid);
                case 1902005: //提提阿納
                case 1902006: //提提奧
                case 1902007: //提拉奧斯
                    return JobConstants.is皇家騎士團(jobid);
                case 1902015: //狼神
                case 1902016: //狼神
                case 1902017: //狼神
                case 1902018: //狼神
                    return JobConstants.is狂狼勇士(jobid);
                case 1902040: //第1階段龍
                case 1902041: //第2階段龍
                case 1902042: //第3階段龍
                    return JobConstants.is龍魔導士(jobid);
            }
            if (JobConstants.is末日反抗軍(jobid)) {
                return false; //none lolol
            }
        }
        return mountid / 10000 == 190;
    }

    /*
     * 任務經驗倍數
     * 暫時關掉 有些經驗乘以倍數超級高都成負經驗
     */
    public static int getExpRate_Quest(int level) {
        return 1; //(level >= 30 ? (level >= 70 ? (level >= 120 ? 10 : 5) : 2) : 1)
    }

    public static int getCustomReactItem(int rid, int original) {
        if (rid == 2008006) { //orbis pq LOL
            return (Calendar.getInstance().get(Calendar.DAY_OF_WEEK) + 4001055);
            //4001056 = sunday. 4001062 = saturday
        } else {
            return original;
        }
    }

    public static boolean isForceRespawn(int mapid) {
        switch (mapid) {
            case 103000800: //維多利亞 - 組隊訓練場&lt;1階段>
            case 925100100: //百草堂 - 突破船頭！
                return true;
            default:
                return mapid / 100000 == 9800 && (mapid % 10 == 1 || mapid % 1000 == 100);
        }
    }

    public static int getFishingTime(boolean vip, boolean gm) {
        return gm ? 1000 : (vip ? 30000 : 60000);
    }

    public static int getCustomSpawnID(int summoner, int def) {
        switch (summoner) {
            case 9400589: //地獄船長
            case 9400748: //蓋福克斯
                return 9400706; //小蓋福克斯
            default:
                return def;
        }
    }

    public static boolean canForfeit(int questid) {
        switch (questid) {
            case 20000: //女皇的會面
            case 20010: //歡迎來到聖地！
            case 20015: //向年輕女王行禮
            case 20020: //5條岔路
                return false;
            default:
                return true;
        }
    }

    public static double getAttackRange(MapleStatEffect def, int rangeInc) {
        double defRange = 400 + rangeInc;
        if (def != null) {
            defRange += def.getMaxDistance() + def.getRange();
        }
        //rangeInc adds to X
        //400 is approximate, screen is 600.. may be too much
        //200 for y is also too much
        //default 200000
        return defRange + 347;
    }

    public static double getAttackRange(Point lt, Point rb) {
        double defRange = 400;
        final int maxX = Math.max(Math.abs(lt == null ? 0 : lt.x), Math.abs(rb == null ? 0 : rb.x));
        final int maxY = Math.max(Math.abs(lt == null ? 0 : lt.y), Math.abs(rb == null ? 0 : rb.y));
        defRange += Math.pow(Math.pow(maxX, 2) + Math.pow(maxY, 2), (1d / 2));
        //rangeInc adds to X
        //400 is approximate, screen is 600.. may be too much
        //200 for y is also too much
        //default 200000
        return defRange + 347;
    }

    public static boolean isNoSpawn(int mapID) {
        return mapID == 809040100
                || mapID == 910150210 //新手地圖 - 過去的回憶
                || mapID == 925020010 //新手教學 - 武陵道場修煉場
                || mapID == 925020011 //新手教學 - 武陵道場修煉場
                || mapID == 925020012 //新手教學 - 武陵道場修煉場
                || mapID == 925020013 //新手教學 - 武陵道場修煉場
                || mapID == 925020014 //新手教學 - 武陵道場修煉場
                || mapID == 980010000 //納希沙漠競技場 - 競技場等候室
                || mapID == 980010100 //納希沙漠競技場 - 第一次競技場&lt;等候室>
                || mapID == 980010200 //納希沙漠競技場 - 第二次競技場&lt;等候室>
                || mapID == 980010300 //納希沙漠競技場 - 第三次競技場&lt;等候室>
                || mapID == 980010020; //納希沙漠競技場 - 競技場出口
    }

    public static int getOverrideNpc(int npcID) {
        int ret = npcID;
        switch (ret) {
            case 1033221:
                ret = 9330370;
                break;
        }
        return ret;
    }

    public static boolean isDojo(int mapId) {
        return MapleDojoAgent.BaseAgentMapId / 10000 == mapId / 10000;
    }

    public static int getPartyPlayHP(int mobID) {
        switch (mobID) {
            case 4250000: //苔蘚蝸牛
                return 836000;
            case 4250001: //苔蘚木妖
                return 924000;
            case 5250000: //苔蘚蘑菇
                return 1100000;
            case 5250001: //石頭蟲
                return 1276000;
            case 5250002: //原始野豬
                return 1452000;
            case 9400661:
                return 15000000;
            case 9400660:
                return 30000000;
            case 9400659:
                return 45000000;
            case 9400658:
                return 20000000;
        }
        return 0;
    }

    public static int getPartyPlay(int mapId) {
        switch (mapId) {
            case 300010000: //艾琳森林 - 苔蘚樹叢入口
            case 300010100: //艾琳森林 - 苔蘚樹叢西部森林1
            case 300010200: //艾琳森林 - 苔蘚樹叢西部森林2
            case 300010300: //艾琳森林 - 苔蘚樹叢小路
            case 300010400: //艾琳森林 - 石頭山入口
            case 300020000: //艾琳森林 - 苔蘚樹叢南部森林1
            case 300020100: //艾琳森林 - 苔蘚樹叢南部森林2
            case 300020200: //艾琳森林 - 蘑菇山丘入口
            case 300030000: //艾琳森林 - 苔蘚樹叢東部森林

            case 683070400:
            case 683070401:
            case 683070402:
                return 25;
        }
        return 0;
    }

    public static int getPartyPlay(int mapId, int def) {
        int dd = getPartyPlay(mapId);
        if (dd > 0) {
            return dd;
        }
        return def / 2;
    }

    public static boolean isHyperTeleMap(int mapId) {
        for (int i : hyperTele) {
            if (i == mapId) {
                return true;
            }
        }
        return false;
    }

    public static int getCurrentDate() {
        return DateUtil.getTime();
    }

    public static int getCurrentDate_NoTime() {
        String time = DateUtil.getCurrentDate();
        return Integer.parseInt(time.substring(0, 4) + time.substring(5, 7) + time.substring(8, 10));
    }

    public static void achievementRatio(MapleClient c) {
        if (c.getPlayer() == null || c.getPlayer().getMap() == null) {
            return;
        }
        //PQs not affected: Amoria, MV, CWK, English, Zakum, Horntail(?), Carnival, Ghost, Guild, LudiMaze, Elnath(?)
        switch (c.getPlayer().getMapId()) {
            case 240080600:
            case 920010000: //隱密之地 - 雅典娜禁地&lt;岔路>
            case 930000000: //毒霧森林 - 毒霧森林
            case 930000100: //毒霧森林 - 森林初入
            case 910010000: //維多利亞 - 迎月花山丘
            case 922010100:
            case 910340100: //隱藏地圖  -  第一次同行&lt;1號門>
            case 925100000:
            case 926100000:
            case 926110000:
            case 921120005:
            case 932000100:
            case 923040100:
            case 921160100:
                c.announce(MaplePacketCreator.achievementRatio(0));
                break;
            case 930000200:
            case 922010200:
            case 922010300:
            case 922010400:
            case 922010401:
            case 922010402:
            case 922010403:
            case 922010404:
            case 922010405:
            case 925100100:
            case 926100001:
            case 926110001:
            case 921160200:
                c.announce(MaplePacketCreator.achievementRatio(10));
                break;
            case 930000300:
            case 910340200:
            case 922010500:
            case 922010600:
            case 925100200:
            case 925100201:
            case 925100202:
            case 926100100:
            case 926110100:
            case 921120100:
            case 932000200:
            case 923040200:
            case 921160300:
            case 921160310:
            case 921160320:
            case 921160330:
            case 921160340:
            case 921160350:
                c.announce(MaplePacketCreator.achievementRatio(25));
                break;
            case 930000400:
            case 926100200:
            case 926110200:
            case 926100201:
            case 926110201:
            case 926100202:
            case 926110202:
            case 921160400:
                c.announce(MaplePacketCreator.achievementRatio(35));
                break;
            case 910340300:
            case 922010700:
            case 930000500:
            case 925100300:
            case 925100301:
            case 925100302:
            case 926100203:
            case 926110203:
            case 921120200:
            case 932000300:
            case 240080700:
            case 240080800:
            case 923040300:
            case 921160500:
                c.announce(MaplePacketCreator.achievementRatio(50));
                break;
            case 910340400:
            case 922010800:
            case 930000600:
            case 925100400:
            case 926100300:
            case 926110300:
            case 926100301:
            case 926110301:
            case 926100302:
            case 926110302:
            case 926100303:
            case 926110303:
            case 926100304:
            case 926110304:
            case 921120300:
            case 932000400:
            case 923040400:
            case 921160600:
                c.announce(MaplePacketCreator.achievementRatio(70));
                break;
            case 910340500:
            case 922010900:
            case 930000700:
            case 920010800:
            case 925100500:
            case 926100400:
            case 926110400:
            case 926100401:
            case 926110401:
            case 921120400:
            case 921160700:
                c.announce(MaplePacketCreator.achievementRatio(85));
                break;
            case 922011000:
            case 922011100:
            case 930000800:
            case 920011000:
            case 920011100:
            case 920011200:
            case 920011300:
            case 925100600:
            case 926100500:
            case 926110500:
            case 926100600:
            case 926110600:
            case 921120500:
            case 921120600:
                c.announce(MaplePacketCreator.achievementRatio(100));
                break;
        }
    }

    public static boolean isFishingMap(int mapid) {
        String map[] = FishingConfig.FISHING_MAP.split(",");
        for (String mapid_ : map) {
            if (Integer.valueOf(mapid_) == mapid) {
                return true;
            }
        }
        return false;
    }

    public static boolean isTeamMap(int mapid) {
        return mapid == 109080000
                || mapid == 109080001
                || mapid == 109080002
                || mapid == 109080003
                || mapid == 109080010
                || mapid == 109080011
                || mapid == 109080012
                || mapid == 109090300
                || mapid == 109090301
                || mapid == 109090302
                || mapid == 109090303
                || mapid == 109090304
                || mapid == 910040100
                || mapid == 960020100
                || mapid == 960020101
                || mapid == 960020102
                || mapid == 960020103
                || mapid == 960030100
                || mapid == 689000000
                || mapid == 689000010;
    }

    public static int getStatDice(int stat) {
        switch (stat) {
            case 2:
                return 30;
            case 3:
                return 20;
            case 4:
                return 15;
            case 5:
                return 20;
            case 6:
                return 30;
        }
        return 0;
    }

    public static int getDiceStat(int buffid, int stat) {
        if (buffid == stat || buffid % 10 == stat || buffid / 10 == stat) {
            return getStatDice(stat);
        } else if (buffid == (stat * 100)) {
            return getStatDice(stat) + 10;
        }
        return 0;
    }

    /*
     * 惡魔MP也就是那個能量
     */
    public static int getMPByJob(int job) {
        switch (job) {
            case 3001:
            case 3100:
            case 3110:
            case 3111:
            case 3112:
                return 10;
            case 4002:
            case 4200:
            case 4210:
            case 4211:
            case 4212: {
                return 100;
            }
            default: {
                return JobConstants.is神之子(job) ? 100 : 0;
            }
        }
    }

    public static int getHpApByJob(int jobId) {
        if ((jobId % 1000) / 100 > 5) {
            jobId -= 500;
        }
        if ((jobId % 1000) / 100 == 5) {
            switch (jobId / 10) {
                case 51:
                    return 68;
                case 53:
                    return 28;
            }
        }
        switch (jobId / 100) {
            case 21:
                return 30;
            case 22:
                return 12;
            case 31:
                return 38;
            case 32:
                return 20;
        }
        switch ((jobId % 1000) / 100) {
            case 0:
                return 8;
            case 1:
                return 50;
            case 2:
                return 6;
            case 3:
            case 4:
                return 16;
            case 5:
                return 18;
            default:
                return 8;
        }
    }

    public static int getMpApByJob(int jobId) {
        if (jobId / 100 == 31 || jobId / 100 == 65 || jobId / 100 == 100 || jobId / 100 == 101) {
            return 0;
        }
        if ((jobId % 1000) / 100 > 5) {
            jobId -= 500;
        }
        switch (jobId / 100) {
            case 22:
                return 72;
            case 32:
                return 69;
        }
        switch ((jobId % 1000) / 100) {
            case 0:
                return 57;
            case 1:
                return 53;
            case 2:
                return 79;
            case 3:
            case 4:
                return 61;
            case 5:
                return 65;
            default:
                return 57;
        }
    }

    public static int getAdditionExpRate(final int level) {
        int addition = 1;
        if (level < 100) {
            addition = Math.max(20, 1000 - level * 10);
        }
        return addition;
    }

    public static int getAdditionDropRate(final int level) {
        int addition = 1;
        if (level < 70) {
            addition = 2;
        }
        return addition;
    }

    public static int getOverrideChangeToMap(int mapid) {
        int ret = mapid;
        switch (mapid) {
            case 101010102:
            case 104040002:
            case 102020300:
            case 100030000:
            case 103030200:
            case 105050400:
            case 677000010:
                ret = 200000000;
                break;
        }
        return ret;
    }

    public static int getOverrideReturnMap(int mapid) {
        int ret = mapid;
        switch (mapid) {
            case 960000100:
                ret = 910150210;
                break;
            case JAIL:
            case 910150210:
            case 913051200:
                break;
        }
        return ret;
    }

    public static boolean canSealedLevelUp(int itemid, int level, long exp) {
        return exp >= getExpNeededForLevel(160) && level < (ItemConstants.類型.飾品(itemid) ? 3 : 6);
    }

    public static boolean isDoJangConsume(final int id) {
        return id >= 2022431 && id <= 2022433;
    }

    public static boolean isShareQuestInfo(int questid) {
        switch (questid) {
            case 每日簽到系統_簽到記錄:
            case 每日簽到系統_當前時間:
                return true;
            default:
                return false;
        }
    }

    public static boolean isWorldShareQuest(int questid) {
        switch (questid) {
            default: {
                return questid < 300;
            }
        }
    }

    public static String getEarValue(final int n, final int n2, final int n3) {
        String s = "0";
        switch (JobConstants.getEar(n2, n3)) {
            case 0: {
                s = (((n != 5155000) ? ((n != 5155004) ? (n != 5155005 || JobConstants.is亞克(n2)) : JobConstants.is伊利恩(n2)) : JobConstants.is精靈遊俠(n2)) ? "0" : "1");
                break;
            }
            case 1: {
                s = ((n == 5155000) ? (JobConstants.is精靈遊俠(n2) ? "1" : "0") : ((n == 5155004) ? "2" : ((n == 5155005) ? "3" : "0")));
                break;
            }
            case 2: {
                s = ((n == 5155000) ? "1" : ((n == 5155004) ? (JobConstants.is伊利恩(n2) ? "2" : "0") : ((n == 5155005) ? "3" : "0")));
                break;
            }
            case 3: {
                s = ((n == 5155000) ? "1" : ((n == 5155004) ? "2" : ((n == 5155005) ? (JobConstants.is亞克(n2) ? "3" : "0") : "0")));
                break;
            }
        }
        return s;
    }
}
